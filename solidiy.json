{
  "data": {
    "repository": {
      "description": "Solidity, the Smart Contract Programming Language",
      "id": "MDEwOlJlcG9zaXRvcnk0MDg5MjgxNw==",
      "sshUrl": "git@github.com:ethereum/solidity.git",
      "url": "https://github.com/ethereum/solidity",
      "releases": {
        "totalCount": 96,
        "nodes": [
          {
            "id": "MDc6UmVsZWFzZTQxNzY3NjQ5",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.4/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-04-21T13:51:48Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.4",
                      "id": "MDc6UmVsZWFzZTQxNzY3NjQ5",
                      "name": "Version 0.8.4",
                      "description": "Solidity 0.8.4 fixes a bug in the ABI decoder, adds custom structured errors, ``bytes.concat(...)`` and allows more flexible configuration of the SMT checker. For more details, please see the [release announcement](https://blog.soliditylang.org/2021/04/21/solidity-0.8.4-release-announcement/).\r\n\r\nThe release contains an important bugfix.  See [decoding from memory bug](https://blog.soliditylang.org/2021/04/21/decoding-from-memory-bug/) blog post for more details.\r\n\r\nThe release also implements custom errors. See [custom errors](https://blog.soliditylang.org/2021/04/21/custom-errors/) blog post for an introduction.\r\n\r\n**Important Bugfixes:**\r\n * ABI Decoder V2: For two-dimensional arrays and specially crafted data in memory, the result of ``abi.decode`` can depend on data elsewhere in memory. Calldata decoding is not affected.\r\n\r\n\r\n**Language Features:**\r\n * Assembly / Yul: Allow hex string literals.\r\n * Possibility to use ``bytes.concat`` with variable number of ``bytes`` and ``bytesNN`` arguments which behaves as a restricted version of `abi.encodePacked` with a more descriptive name.\r\n * Support custom errors via the ``error`` keyword and introduce the ``revert`` statement.\r\n\r\n\r\n**Compiler Features:**\r\n * Analysis: Properly detect circular references to the bytecode of other contracts across all function calls.\r\n * Commandline Interface: Model checker option ``--model-checker-targets`` also accepts ``outOfBounds``.\r\n * Commandline Interface: New model checker option ``--model-checker-contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Low-Level Inliner: Inline ordinary jumps to small blocks and jumps to small blocks that terminate.\r\n * NatSpec: Allow ``@notice`` tag on non-public state variables and local variable declarations. The documentation will only be part of the AST, under the field ``documentation``.\r\n * SMTChecker: Deprecate ``pragma experimental SMTChecker;`` and set default model checker engine to ``none``.\r\n * SMTChecker: Report local variables in CHC counterexamples.\r\n * SMTChecker: Report out of bounds index access for arrays and fixed bytes.\r\n * SMTChecker: Support file level functions and constants.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` also accepts ``outOfBounds``.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` takes an array of string targets instead of string of comma separated targets.\r\n * Standard JSON: New model checker option ``settings.modelChecker.contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Yul EVM Code Transform: Stack Optimization: Reuse slots of unused function arguments and defer allocating stack slots for return variables until after expression statements and assignments that do not reference them.\r\n * Yul Optimizer: Added a new step FunctionSpecializer, that specializes a function with its literal arguments.\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Fix parsing of import paths involving properly distinguishing between empty and non-empty string literals in general.\r\n * AST Output: Fix ``kind`` field of ``ModifierInvocation`` for base constructor calls.\r\n * Commandline interface: Fix internal error when printing AST and using ``--base-path`` or ``file://`` prefix in imports.\r\n * Commandline interface: Fix standard input bypassing allowed path checks.\r\n * Natspec: Fix internal error related to the `@returns` documentation for a public state variable overriding a function.\r\n * SMTChecker: Fix false positive and false negative on ``push`` as LHS of a compound assignment.\r\n * SMTChecker: Fix false positive in contracts that cannot be deployed.\r\n * SMTChecker: Fix internal error on public getter returning dynamic data on older EVM versions where these are not available.\r\n * SMTChecker: Fix internal error on try-catch with function call in catch block.\r\n * Type Checker: Fix missing error when events are used without an emit statement.\r\n\r\n\r\n**AST Changes:**\r\n * New property for ``ContractDefinition`` nodes: ``usedErrors`` lists AST IDs of all errors used by the contract (even if defined outside).\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Anurag Dashputre, Behrouz, Bhargava Shastry, Christian Parpart, Daniel Kirchner, Đorđe Mijović, Feiyang Tan, franzihei, Harikrishnan Mulackal, Hongbo Miao, Kamil Śliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, Paul Razvan Berg, Thibaut Schaeffer, zayneio, \r\n\r\nIf you want to perform a source build, please only use solidity_0.8.4.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.4/solc-macos",
                    "release": {
                      "publishedAt": "2021-04-21T13:51:48Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.4",
                      "id": "MDc6UmVsZWFzZTQxNzY3NjQ5",
                      "name": "Version 0.8.4",
                      "description": "Solidity 0.8.4 fixes a bug in the ABI decoder, adds custom structured errors, ``bytes.concat(...)`` and allows more flexible configuration of the SMT checker. For more details, please see the [release announcement](https://blog.soliditylang.org/2021/04/21/solidity-0.8.4-release-announcement/).\r\n\r\nThe release contains an important bugfix.  See [decoding from memory bug](https://blog.soliditylang.org/2021/04/21/decoding-from-memory-bug/) blog post for more details.\r\n\r\nThe release also implements custom errors. See [custom errors](https://blog.soliditylang.org/2021/04/21/custom-errors/) blog post for an introduction.\r\n\r\n**Important Bugfixes:**\r\n * ABI Decoder V2: For two-dimensional arrays and specially crafted data in memory, the result of ``abi.decode`` can depend on data elsewhere in memory. Calldata decoding is not affected.\r\n\r\n\r\n**Language Features:**\r\n * Assembly / Yul: Allow hex string literals.\r\n * Possibility to use ``bytes.concat`` with variable number of ``bytes`` and ``bytesNN`` arguments which behaves as a restricted version of `abi.encodePacked` with a more descriptive name.\r\n * Support custom errors via the ``error`` keyword and introduce the ``revert`` statement.\r\n\r\n\r\n**Compiler Features:**\r\n * Analysis: Properly detect circular references to the bytecode of other contracts across all function calls.\r\n * Commandline Interface: Model checker option ``--model-checker-targets`` also accepts ``outOfBounds``.\r\n * Commandline Interface: New model checker option ``--model-checker-contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Low-Level Inliner: Inline ordinary jumps to small blocks and jumps to small blocks that terminate.\r\n * NatSpec: Allow ``@notice`` tag on non-public state variables and local variable declarations. The documentation will only be part of the AST, under the field ``documentation``.\r\n * SMTChecker: Deprecate ``pragma experimental SMTChecker;`` and set default model checker engine to ``none``.\r\n * SMTChecker: Report local variables in CHC counterexamples.\r\n * SMTChecker: Report out of bounds index access for arrays and fixed bytes.\r\n * SMTChecker: Support file level functions and constants.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` also accepts ``outOfBounds``.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` takes an array of string targets instead of string of comma separated targets.\r\n * Standard JSON: New model checker option ``settings.modelChecker.contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Yul EVM Code Transform: Stack Optimization: Reuse slots of unused function arguments and defer allocating stack slots for return variables until after expression statements and assignments that do not reference them.\r\n * Yul Optimizer: Added a new step FunctionSpecializer, that specializes a function with its literal arguments.\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Fix parsing of import paths involving properly distinguishing between empty and non-empty string literals in general.\r\n * AST Output: Fix ``kind`` field of ``ModifierInvocation`` for base constructor calls.\r\n * Commandline interface: Fix internal error when printing AST and using ``--base-path`` or ``file://`` prefix in imports.\r\n * Commandline interface: Fix standard input bypassing allowed path checks.\r\n * Natspec: Fix internal error related to the `@returns` documentation for a public state variable overriding a function.\r\n * SMTChecker: Fix false positive and false negative on ``push`` as LHS of a compound assignment.\r\n * SMTChecker: Fix false positive in contracts that cannot be deployed.\r\n * SMTChecker: Fix internal error on public getter returning dynamic data on older EVM versions where these are not available.\r\n * SMTChecker: Fix internal error on try-catch with function call in catch block.\r\n * Type Checker: Fix missing error when events are used without an emit statement.\r\n\r\n\r\n**AST Changes:**\r\n * New property for ``ContractDefinition`` nodes: ``usedErrors`` lists AST IDs of all errors used by the contract (even if defined outside).\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Anurag Dashputre, Behrouz, Bhargava Shastry, Christian Parpart, Daniel Kirchner, Đorđe Mijović, Feiyang Tan, franzihei, Harikrishnan Mulackal, Hongbo Miao, Kamil Śliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, Paul Razvan Berg, Thibaut Schaeffer, zayneio, \r\n\r\nIf you want to perform a source build, please only use solidity_0.8.4.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.4/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-04-21T13:51:48Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.4",
                      "id": "MDc6UmVsZWFzZTQxNzY3NjQ5",
                      "name": "Version 0.8.4",
                      "description": "Solidity 0.8.4 fixes a bug in the ABI decoder, adds custom structured errors, ``bytes.concat(...)`` and allows more flexible configuration of the SMT checker. For more details, please see the [release announcement](https://blog.soliditylang.org/2021/04/21/solidity-0.8.4-release-announcement/).\r\n\r\nThe release contains an important bugfix.  See [decoding from memory bug](https://blog.soliditylang.org/2021/04/21/decoding-from-memory-bug/) blog post for more details.\r\n\r\nThe release also implements custom errors. See [custom errors](https://blog.soliditylang.org/2021/04/21/custom-errors/) blog post for an introduction.\r\n\r\n**Important Bugfixes:**\r\n * ABI Decoder V2: For two-dimensional arrays and specially crafted data in memory, the result of ``abi.decode`` can depend on data elsewhere in memory. Calldata decoding is not affected.\r\n\r\n\r\n**Language Features:**\r\n * Assembly / Yul: Allow hex string literals.\r\n * Possibility to use ``bytes.concat`` with variable number of ``bytes`` and ``bytesNN`` arguments which behaves as a restricted version of `abi.encodePacked` with a more descriptive name.\r\n * Support custom errors via the ``error`` keyword and introduce the ``revert`` statement.\r\n\r\n\r\n**Compiler Features:**\r\n * Analysis: Properly detect circular references to the bytecode of other contracts across all function calls.\r\n * Commandline Interface: Model checker option ``--model-checker-targets`` also accepts ``outOfBounds``.\r\n * Commandline Interface: New model checker option ``--model-checker-contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Low-Level Inliner: Inline ordinary jumps to small blocks and jumps to small blocks that terminate.\r\n * NatSpec: Allow ``@notice`` tag on non-public state variables and local variable declarations. The documentation will only be part of the AST, under the field ``documentation``.\r\n * SMTChecker: Deprecate ``pragma experimental SMTChecker;`` and set default model checker engine to ``none``.\r\n * SMTChecker: Report local variables in CHC counterexamples.\r\n * SMTChecker: Report out of bounds index access for arrays and fixed bytes.\r\n * SMTChecker: Support file level functions and constants.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` also accepts ``outOfBounds``.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` takes an array of string targets instead of string of comma separated targets.\r\n * Standard JSON: New model checker option ``settings.modelChecker.contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Yul EVM Code Transform: Stack Optimization: Reuse slots of unused function arguments and defer allocating stack slots for return variables until after expression statements and assignments that do not reference them.\r\n * Yul Optimizer: Added a new step FunctionSpecializer, that specializes a function with its literal arguments.\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Fix parsing of import paths involving properly distinguishing between empty and non-empty string literals in general.\r\n * AST Output: Fix ``kind`` field of ``ModifierInvocation`` for base constructor calls.\r\n * Commandline interface: Fix internal error when printing AST and using ``--base-path`` or ``file://`` prefix in imports.\r\n * Commandline interface: Fix standard input bypassing allowed path checks.\r\n * Natspec: Fix internal error related to the `@returns` documentation for a public state variable overriding a function.\r\n * SMTChecker: Fix false positive and false negative on ``push`` as LHS of a compound assignment.\r\n * SMTChecker: Fix false positive in contracts that cannot be deployed.\r\n * SMTChecker: Fix internal error on public getter returning dynamic data on older EVM versions where these are not available.\r\n * SMTChecker: Fix internal error on try-catch with function call in catch block.\r\n * Type Checker: Fix missing error when events are used without an emit statement.\r\n\r\n\r\n**AST Changes:**\r\n * New property for ``ContractDefinition`` nodes: ``usedErrors`` lists AST IDs of all errors used by the contract (even if defined outside).\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Anurag Dashputre, Behrouz, Bhargava Shastry, Christian Parpart, Daniel Kirchner, Đorđe Mijović, Feiyang Tan, franzihei, Harikrishnan Mulackal, Hongbo Miao, Kamil Śliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, Paul Razvan Berg, Thibaut Schaeffer, zayneio, \r\n\r\nIf you want to perform a source build, please only use solidity_0.8.4.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.4/solidity_0.8.4.tar.gz",
                    "release": {
                      "publishedAt": "2021-04-21T13:51:48Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.4",
                      "id": "MDc6UmVsZWFzZTQxNzY3NjQ5",
                      "name": "Version 0.8.4",
                      "description": "Solidity 0.8.4 fixes a bug in the ABI decoder, adds custom structured errors, ``bytes.concat(...)`` and allows more flexible configuration of the SMT checker. For more details, please see the [release announcement](https://blog.soliditylang.org/2021/04/21/solidity-0.8.4-release-announcement/).\r\n\r\nThe release contains an important bugfix.  See [decoding from memory bug](https://blog.soliditylang.org/2021/04/21/decoding-from-memory-bug/) blog post for more details.\r\n\r\nThe release also implements custom errors. See [custom errors](https://blog.soliditylang.org/2021/04/21/custom-errors/) blog post for an introduction.\r\n\r\n**Important Bugfixes:**\r\n * ABI Decoder V2: For two-dimensional arrays and specially crafted data in memory, the result of ``abi.decode`` can depend on data elsewhere in memory. Calldata decoding is not affected.\r\n\r\n\r\n**Language Features:**\r\n * Assembly / Yul: Allow hex string literals.\r\n * Possibility to use ``bytes.concat`` with variable number of ``bytes`` and ``bytesNN`` arguments which behaves as a restricted version of `abi.encodePacked` with a more descriptive name.\r\n * Support custom errors via the ``error`` keyword and introduce the ``revert`` statement.\r\n\r\n\r\n**Compiler Features:**\r\n * Analysis: Properly detect circular references to the bytecode of other contracts across all function calls.\r\n * Commandline Interface: Model checker option ``--model-checker-targets`` also accepts ``outOfBounds``.\r\n * Commandline Interface: New model checker option ``--model-checker-contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Low-Level Inliner: Inline ordinary jumps to small blocks and jumps to small blocks that terminate.\r\n * NatSpec: Allow ``@notice`` tag on non-public state variables and local variable declarations. The documentation will only be part of the AST, under the field ``documentation``.\r\n * SMTChecker: Deprecate ``pragma experimental SMTChecker;`` and set default model checker engine to ``none``.\r\n * SMTChecker: Report local variables in CHC counterexamples.\r\n * SMTChecker: Report out of bounds index access for arrays and fixed bytes.\r\n * SMTChecker: Support file level functions and constants.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` also accepts ``outOfBounds``.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` takes an array of string targets instead of string of comma separated targets.\r\n * Standard JSON: New model checker option ``settings.modelChecker.contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Yul EVM Code Transform: Stack Optimization: Reuse slots of unused function arguments and defer allocating stack slots for return variables until after expression statements and assignments that do not reference them.\r\n * Yul Optimizer: Added a new step FunctionSpecializer, that specializes a function with its literal arguments.\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Fix parsing of import paths involving properly distinguishing between empty and non-empty string literals in general.\r\n * AST Output: Fix ``kind`` field of ``ModifierInvocation`` for base constructor calls.\r\n * Commandline interface: Fix internal error when printing AST and using ``--base-path`` or ``file://`` prefix in imports.\r\n * Commandline interface: Fix standard input bypassing allowed path checks.\r\n * Natspec: Fix internal error related to the `@returns` documentation for a public state variable overriding a function.\r\n * SMTChecker: Fix false positive and false negative on ``push`` as LHS of a compound assignment.\r\n * SMTChecker: Fix false positive in contracts that cannot be deployed.\r\n * SMTChecker: Fix internal error on public getter returning dynamic data on older EVM versions where these are not available.\r\n * SMTChecker: Fix internal error on try-catch with function call in catch block.\r\n * Type Checker: Fix missing error when events are used without an emit statement.\r\n\r\n\r\n**AST Changes:**\r\n * New property for ``ContractDefinition`` nodes: ``usedErrors`` lists AST IDs of all errors used by the contract (even if defined outside).\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Anurag Dashputre, Behrouz, Bhargava Shastry, Christian Parpart, Daniel Kirchner, Đorđe Mijović, Feiyang Tan, franzihei, Harikrishnan Mulackal, Hongbo Miao, Kamil Śliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, Paul Razvan Berg, Thibaut Schaeffer, zayneio, \r\n\r\nIf you want to perform a source build, please only use solidity_0.8.4.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.4/soljson.js",
                    "release": {
                      "publishedAt": "2021-04-21T13:51:48Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.4",
                      "id": "MDc6UmVsZWFzZTQxNzY3NjQ5",
                      "name": "Version 0.8.4",
                      "description": "Solidity 0.8.4 fixes a bug in the ABI decoder, adds custom structured errors, ``bytes.concat(...)`` and allows more flexible configuration of the SMT checker. For more details, please see the [release announcement](https://blog.soliditylang.org/2021/04/21/solidity-0.8.4-release-announcement/).\r\n\r\nThe release contains an important bugfix.  See [decoding from memory bug](https://blog.soliditylang.org/2021/04/21/decoding-from-memory-bug/) blog post for more details.\r\n\r\nThe release also implements custom errors. See [custom errors](https://blog.soliditylang.org/2021/04/21/custom-errors/) blog post for an introduction.\r\n\r\n**Important Bugfixes:**\r\n * ABI Decoder V2: For two-dimensional arrays and specially crafted data in memory, the result of ``abi.decode`` can depend on data elsewhere in memory. Calldata decoding is not affected.\r\n\r\n\r\n**Language Features:**\r\n * Assembly / Yul: Allow hex string literals.\r\n * Possibility to use ``bytes.concat`` with variable number of ``bytes`` and ``bytesNN`` arguments which behaves as a restricted version of `abi.encodePacked` with a more descriptive name.\r\n * Support custom errors via the ``error`` keyword and introduce the ``revert`` statement.\r\n\r\n\r\n**Compiler Features:**\r\n * Analysis: Properly detect circular references to the bytecode of other contracts across all function calls.\r\n * Commandline Interface: Model checker option ``--model-checker-targets`` also accepts ``outOfBounds``.\r\n * Commandline Interface: New model checker option ``--model-checker-contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Low-Level Inliner: Inline ordinary jumps to small blocks and jumps to small blocks that terminate.\r\n * NatSpec: Allow ``@notice`` tag on non-public state variables and local variable declarations. The documentation will only be part of the AST, under the field ``documentation``.\r\n * SMTChecker: Deprecate ``pragma experimental SMTChecker;`` and set default model checker engine to ``none``.\r\n * SMTChecker: Report local variables in CHC counterexamples.\r\n * SMTChecker: Report out of bounds index access for arrays and fixed bytes.\r\n * SMTChecker: Support file level functions and constants.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` also accepts ``outOfBounds``.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` takes an array of string targets instead of string of comma separated targets.\r\n * Standard JSON: New model checker option ``settings.modelChecker.contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Yul EVM Code Transform: Stack Optimization: Reuse slots of unused function arguments and defer allocating stack slots for return variables until after expression statements and assignments that do not reference them.\r\n * Yul Optimizer: Added a new step FunctionSpecializer, that specializes a function with its literal arguments.\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Fix parsing of import paths involving properly distinguishing between empty and non-empty string literals in general.\r\n * AST Output: Fix ``kind`` field of ``ModifierInvocation`` for base constructor calls.\r\n * Commandline interface: Fix internal error when printing AST and using ``--base-path`` or ``file://`` prefix in imports.\r\n * Commandline interface: Fix standard input bypassing allowed path checks.\r\n * Natspec: Fix internal error related to the `@returns` documentation for a public state variable overriding a function.\r\n * SMTChecker: Fix false positive and false negative on ``push`` as LHS of a compound assignment.\r\n * SMTChecker: Fix false positive in contracts that cannot be deployed.\r\n * SMTChecker: Fix internal error on public getter returning dynamic data on older EVM versions where these are not available.\r\n * SMTChecker: Fix internal error on try-catch with function call in catch block.\r\n * Type Checker: Fix missing error when events are used without an emit statement.\r\n\r\n\r\n**AST Changes:**\r\n * New property for ``ContractDefinition`` nodes: ``usedErrors`` lists AST IDs of all errors used by the contract (even if defined outside).\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Anurag Dashputre, Behrouz, Bhargava Shastry, Christian Parpart, Daniel Kirchner, Đorđe Mijović, Feiyang Tan, franzihei, Harikrishnan Mulackal, Hongbo Miao, Kamil Śliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, Paul Razvan Berg, Thibaut Schaeffer, zayneio, \r\n\r\nIf you want to perform a source build, please only use solidity_0.8.4.tar.gz and not the zip provided by github directly."
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.4",
            "name": "Version 0.8.4"
          },
          {
            "id": "MDc6UmVsZWFzZTQ0NDA2ODMz",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.5/solidity_0.8.5.tar.gz",
                    "release": {
                      "publishedAt": "2021-06-10T12:02:58Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.5",
                      "id": "MDc6UmVsZWFzZTQ0NDA2ODMz",
                      "name": "Version 0.8.5",
                      "description": "Solidity 0.8.5 allows conversions from ``bytes`` to ``bytesNN`` values, adds the ``verbatim`` builtin function to inject\r\narbitrary bytecode in Yul and fixes several smaller bugs.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/10/solidity-0.8.5-release-announcement/).\r\n\r\n**Language Features:**\r\n * Allowing conversion from ``bytes`` and ``bytes`` slices to ``bytes1``/.../``bytes32``.\r\n * Yul: Add ``verbatim`` builtin function to inject arbitrary bytecode.\r\n\r\n**Compiler Features:**\r\n * Code Generator: Insert helper functions for panic codes instead of inlining unconditionally. This can reduce costs if many panics (checks) are inserted, but can increase costs where few panics are used.\r\n * EVM: Set the default EVM version to \"Berlin\".\r\n * SMTChecker: Function definitions can be annotated with the custom Natspec tag ``custom:smtchecker abstract-function-nondet`` to be abstracted by a nondeterministic value when called.\r\n * Standard JSON / combined JSON: New artifact \"functionDebugData\" that contains bytecode offsets of entry points of functions and potentially more information in the future.\r\n * Yul Optimizer: Evaluate ``keccak256(a, c)``, when the value at memory location ``a`` is known at compile time and ``c`` is a constant ``<= 32``.\r\n\r\n**Bugfixes:**\r\n * AST: Do not output value of Yul literal if it is not a valid UTF-8 string.\r\n * Code Generator: Fix internal error when function arrays are assigned to storage variables and the function types can be implicitly converted but are not identical.\r\n * Code Generator: Fix internal error when super would have to skip an unimplemented function in the virtual resolution order.\r\n * Control Flow Graph: Assume unimplemented modifiers use a placeholder.\r\n * Control Flow Graph: Take internal calls to functions that always revert into account for reporting unused or unassigned variables.\r\n * Function Call Graph: Fix internal error connected with circular constant references.\r\n * Name Resolver: Do not issue shadowing warning if the shadowing name is not directly accessible.\r\n * Natspec: Allow multiple ``@return`` tags on public state variable documentation.\r\n * SMTChecker: Fix internal error on conversion from ``bytes`` to ``fixed bytes``.\r\n * SMTChecker: Fix internal error on external calls from the constructor.\r\n * SMTChecker: Fix internal error on struct constructor with fixed bytes member initialized with string literal.\r\n * Source Locations: Properly set source location of scoped blocks.\r\n * Standard JSON: Properly allow the ``inliner`` setting under ``settings.optimizer.details``.\r\n * Type Checker: Fix internal compiler error related to having mapping types in constructor parameter for abstract contracts.\r\n * Type Checker: Fix internal compiler error when attempting to use an invalid external function type on pre-byzantium EVMs.\r\n * Type Checker: Fix internal compiler error when overriding receive ether function with one having different parameters during inheritance.\r\n * Type Checker: Make errors about (nested) mapping type in event or error parameter into fatal type errors.\r\n * Type Checker: Fix internal compiler error when overriding an implemented modifier with an unimplemented one.\r\n\r\n**AST Changes:**\r\n * Add member `hexValue` for Yul string and hex literals.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\na3d4, Alex Beregszaszi, Alexander Arlt, Anurag Dashputre, Bhargava Shastry, Christian Parpart, cxxboy, Daniel Kirchner, Đorđe Mijović, Franziska Heintel, Harikrishnan Mulackal, Kamil Śliwak, Keqi Huang, Leonardo Alt, Martin Blicha, Mathias Baumann, Maurelian, newbateni, Raphael Roullet, TerranCivilian, Wade Dorrell, William Entriken.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.5.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.5/solc-macos",
                    "release": {
                      "publishedAt": "2021-06-10T12:02:58Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.5",
                      "id": "MDc6UmVsZWFzZTQ0NDA2ODMz",
                      "name": "Version 0.8.5",
                      "description": "Solidity 0.8.5 allows conversions from ``bytes`` to ``bytesNN`` values, adds the ``verbatim`` builtin function to inject\r\narbitrary bytecode in Yul and fixes several smaller bugs.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/10/solidity-0.8.5-release-announcement/).\r\n\r\n**Language Features:**\r\n * Allowing conversion from ``bytes`` and ``bytes`` slices to ``bytes1``/.../``bytes32``.\r\n * Yul: Add ``verbatim`` builtin function to inject arbitrary bytecode.\r\n\r\n**Compiler Features:**\r\n * Code Generator: Insert helper functions for panic codes instead of inlining unconditionally. This can reduce costs if many panics (checks) are inserted, but can increase costs where few panics are used.\r\n * EVM: Set the default EVM version to \"Berlin\".\r\n * SMTChecker: Function definitions can be annotated with the custom Natspec tag ``custom:smtchecker abstract-function-nondet`` to be abstracted by a nondeterministic value when called.\r\n * Standard JSON / combined JSON: New artifact \"functionDebugData\" that contains bytecode offsets of entry points of functions and potentially more information in the future.\r\n * Yul Optimizer: Evaluate ``keccak256(a, c)``, when the value at memory location ``a`` is known at compile time and ``c`` is a constant ``<= 32``.\r\n\r\n**Bugfixes:**\r\n * AST: Do not output value of Yul literal if it is not a valid UTF-8 string.\r\n * Code Generator: Fix internal error when function arrays are assigned to storage variables and the function types can be implicitly converted but are not identical.\r\n * Code Generator: Fix internal error when super would have to skip an unimplemented function in the virtual resolution order.\r\n * Control Flow Graph: Assume unimplemented modifiers use a placeholder.\r\n * Control Flow Graph: Take internal calls to functions that always revert into account for reporting unused or unassigned variables.\r\n * Function Call Graph: Fix internal error connected with circular constant references.\r\n * Name Resolver: Do not issue shadowing warning if the shadowing name is not directly accessible.\r\n * Natspec: Allow multiple ``@return`` tags on public state variable documentation.\r\n * SMTChecker: Fix internal error on conversion from ``bytes`` to ``fixed bytes``.\r\n * SMTChecker: Fix internal error on external calls from the constructor.\r\n * SMTChecker: Fix internal error on struct constructor with fixed bytes member initialized with string literal.\r\n * Source Locations: Properly set source location of scoped blocks.\r\n * Standard JSON: Properly allow the ``inliner`` setting under ``settings.optimizer.details``.\r\n * Type Checker: Fix internal compiler error related to having mapping types in constructor parameter for abstract contracts.\r\n * Type Checker: Fix internal compiler error when attempting to use an invalid external function type on pre-byzantium EVMs.\r\n * Type Checker: Fix internal compiler error when overriding receive ether function with one having different parameters during inheritance.\r\n * Type Checker: Make errors about (nested) mapping type in event or error parameter into fatal type errors.\r\n * Type Checker: Fix internal compiler error when overriding an implemented modifier with an unimplemented one.\r\n\r\n**AST Changes:**\r\n * Add member `hexValue` for Yul string and hex literals.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\na3d4, Alex Beregszaszi, Alexander Arlt, Anurag Dashputre, Bhargava Shastry, Christian Parpart, cxxboy, Daniel Kirchner, Đorđe Mijović, Franziska Heintel, Harikrishnan Mulackal, Kamil Śliwak, Keqi Huang, Leonardo Alt, Martin Blicha, Mathias Baumann, Maurelian, newbateni, Raphael Roullet, TerranCivilian, Wade Dorrell, William Entriken.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.5.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.5/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-06-10T12:02:58Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.5",
                      "id": "MDc6UmVsZWFzZTQ0NDA2ODMz",
                      "name": "Version 0.8.5",
                      "description": "Solidity 0.8.5 allows conversions from ``bytes`` to ``bytesNN`` values, adds the ``verbatim`` builtin function to inject\r\narbitrary bytecode in Yul and fixes several smaller bugs.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/10/solidity-0.8.5-release-announcement/).\r\n\r\n**Language Features:**\r\n * Allowing conversion from ``bytes`` and ``bytes`` slices to ``bytes1``/.../``bytes32``.\r\n * Yul: Add ``verbatim`` builtin function to inject arbitrary bytecode.\r\n\r\n**Compiler Features:**\r\n * Code Generator: Insert helper functions for panic codes instead of inlining unconditionally. This can reduce costs if many panics (checks) are inserted, but can increase costs where few panics are used.\r\n * EVM: Set the default EVM version to \"Berlin\".\r\n * SMTChecker: Function definitions can be annotated with the custom Natspec tag ``custom:smtchecker abstract-function-nondet`` to be abstracted by a nondeterministic value when called.\r\n * Standard JSON / combined JSON: New artifact \"functionDebugData\" that contains bytecode offsets of entry points of functions and potentially more information in the future.\r\n * Yul Optimizer: Evaluate ``keccak256(a, c)``, when the value at memory location ``a`` is known at compile time and ``c`` is a constant ``<= 32``.\r\n\r\n**Bugfixes:**\r\n * AST: Do not output value of Yul literal if it is not a valid UTF-8 string.\r\n * Code Generator: Fix internal error when function arrays are assigned to storage variables and the function types can be implicitly converted but are not identical.\r\n * Code Generator: Fix internal error when super would have to skip an unimplemented function in the virtual resolution order.\r\n * Control Flow Graph: Assume unimplemented modifiers use a placeholder.\r\n * Control Flow Graph: Take internal calls to functions that always revert into account for reporting unused or unassigned variables.\r\n * Function Call Graph: Fix internal error connected with circular constant references.\r\n * Name Resolver: Do not issue shadowing warning if the shadowing name is not directly accessible.\r\n * Natspec: Allow multiple ``@return`` tags on public state variable documentation.\r\n * SMTChecker: Fix internal error on conversion from ``bytes`` to ``fixed bytes``.\r\n * SMTChecker: Fix internal error on external calls from the constructor.\r\n * SMTChecker: Fix internal error on struct constructor with fixed bytes member initialized with string literal.\r\n * Source Locations: Properly set source location of scoped blocks.\r\n * Standard JSON: Properly allow the ``inliner`` setting under ``settings.optimizer.details``.\r\n * Type Checker: Fix internal compiler error related to having mapping types in constructor parameter for abstract contracts.\r\n * Type Checker: Fix internal compiler error when attempting to use an invalid external function type on pre-byzantium EVMs.\r\n * Type Checker: Fix internal compiler error when overriding receive ether function with one having different parameters during inheritance.\r\n * Type Checker: Make errors about (nested) mapping type in event or error parameter into fatal type errors.\r\n * Type Checker: Fix internal compiler error when overriding an implemented modifier with an unimplemented one.\r\n\r\n**AST Changes:**\r\n * Add member `hexValue` for Yul string and hex literals.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\na3d4, Alex Beregszaszi, Alexander Arlt, Anurag Dashputre, Bhargava Shastry, Christian Parpart, cxxboy, Daniel Kirchner, Đorđe Mijović, Franziska Heintel, Harikrishnan Mulackal, Kamil Śliwak, Keqi Huang, Leonardo Alt, Martin Blicha, Mathias Baumann, Maurelian, newbateni, Raphael Roullet, TerranCivilian, Wade Dorrell, William Entriken.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.5.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.5/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-06-10T12:02:58Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.5",
                      "id": "MDc6UmVsZWFzZTQ0NDA2ODMz",
                      "name": "Version 0.8.5",
                      "description": "Solidity 0.8.5 allows conversions from ``bytes`` to ``bytesNN`` values, adds the ``verbatim`` builtin function to inject\r\narbitrary bytecode in Yul and fixes several smaller bugs.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/10/solidity-0.8.5-release-announcement/).\r\n\r\n**Language Features:**\r\n * Allowing conversion from ``bytes`` and ``bytes`` slices to ``bytes1``/.../``bytes32``.\r\n * Yul: Add ``verbatim`` builtin function to inject arbitrary bytecode.\r\n\r\n**Compiler Features:**\r\n * Code Generator: Insert helper functions for panic codes instead of inlining unconditionally. This can reduce costs if many panics (checks) are inserted, but can increase costs where few panics are used.\r\n * EVM: Set the default EVM version to \"Berlin\".\r\n * SMTChecker: Function definitions can be annotated with the custom Natspec tag ``custom:smtchecker abstract-function-nondet`` to be abstracted by a nondeterministic value when called.\r\n * Standard JSON / combined JSON: New artifact \"functionDebugData\" that contains bytecode offsets of entry points of functions and potentially more information in the future.\r\n * Yul Optimizer: Evaluate ``keccak256(a, c)``, when the value at memory location ``a`` is known at compile time and ``c`` is a constant ``<= 32``.\r\n\r\n**Bugfixes:**\r\n * AST: Do not output value of Yul literal if it is not a valid UTF-8 string.\r\n * Code Generator: Fix internal error when function arrays are assigned to storage variables and the function types can be implicitly converted but are not identical.\r\n * Code Generator: Fix internal error when super would have to skip an unimplemented function in the virtual resolution order.\r\n * Control Flow Graph: Assume unimplemented modifiers use a placeholder.\r\n * Control Flow Graph: Take internal calls to functions that always revert into account for reporting unused or unassigned variables.\r\n * Function Call Graph: Fix internal error connected with circular constant references.\r\n * Name Resolver: Do not issue shadowing warning if the shadowing name is not directly accessible.\r\n * Natspec: Allow multiple ``@return`` tags on public state variable documentation.\r\n * SMTChecker: Fix internal error on conversion from ``bytes`` to ``fixed bytes``.\r\n * SMTChecker: Fix internal error on external calls from the constructor.\r\n * SMTChecker: Fix internal error on struct constructor with fixed bytes member initialized with string literal.\r\n * Source Locations: Properly set source location of scoped blocks.\r\n * Standard JSON: Properly allow the ``inliner`` setting under ``settings.optimizer.details``.\r\n * Type Checker: Fix internal compiler error related to having mapping types in constructor parameter for abstract contracts.\r\n * Type Checker: Fix internal compiler error when attempting to use an invalid external function type on pre-byzantium EVMs.\r\n * Type Checker: Fix internal compiler error when overriding receive ether function with one having different parameters during inheritance.\r\n * Type Checker: Make errors about (nested) mapping type in event or error parameter into fatal type errors.\r\n * Type Checker: Fix internal compiler error when overriding an implemented modifier with an unimplemented one.\r\n\r\n**AST Changes:**\r\n * Add member `hexValue` for Yul string and hex literals.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\na3d4, Alex Beregszaszi, Alexander Arlt, Anurag Dashputre, Bhargava Shastry, Christian Parpart, cxxboy, Daniel Kirchner, Đorđe Mijović, Franziska Heintel, Harikrishnan Mulackal, Kamil Śliwak, Keqi Huang, Leonardo Alt, Martin Blicha, Mathias Baumann, Maurelian, newbateni, Raphael Roullet, TerranCivilian, Wade Dorrell, William Entriken.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.5.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.5/soljson.js",
                    "release": {
                      "publishedAt": "2021-06-10T12:02:58Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.5",
                      "id": "MDc6UmVsZWFzZTQ0NDA2ODMz",
                      "name": "Version 0.8.5",
                      "description": "Solidity 0.8.5 allows conversions from ``bytes`` to ``bytesNN`` values, adds the ``verbatim`` builtin function to inject\r\narbitrary bytecode in Yul and fixes several smaller bugs.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/10/solidity-0.8.5-release-announcement/).\r\n\r\n**Language Features:**\r\n * Allowing conversion from ``bytes`` and ``bytes`` slices to ``bytes1``/.../``bytes32``.\r\n * Yul: Add ``verbatim`` builtin function to inject arbitrary bytecode.\r\n\r\n**Compiler Features:**\r\n * Code Generator: Insert helper functions for panic codes instead of inlining unconditionally. This can reduce costs if many panics (checks) are inserted, but can increase costs where few panics are used.\r\n * EVM: Set the default EVM version to \"Berlin\".\r\n * SMTChecker: Function definitions can be annotated with the custom Natspec tag ``custom:smtchecker abstract-function-nondet`` to be abstracted by a nondeterministic value when called.\r\n * Standard JSON / combined JSON: New artifact \"functionDebugData\" that contains bytecode offsets of entry points of functions and potentially more information in the future.\r\n * Yul Optimizer: Evaluate ``keccak256(a, c)``, when the value at memory location ``a`` is known at compile time and ``c`` is a constant ``<= 32``.\r\n\r\n**Bugfixes:**\r\n * AST: Do not output value of Yul literal if it is not a valid UTF-8 string.\r\n * Code Generator: Fix internal error when function arrays are assigned to storage variables and the function types can be implicitly converted but are not identical.\r\n * Code Generator: Fix internal error when super would have to skip an unimplemented function in the virtual resolution order.\r\n * Control Flow Graph: Assume unimplemented modifiers use a placeholder.\r\n * Control Flow Graph: Take internal calls to functions that always revert into account for reporting unused or unassigned variables.\r\n * Function Call Graph: Fix internal error connected with circular constant references.\r\n * Name Resolver: Do not issue shadowing warning if the shadowing name is not directly accessible.\r\n * Natspec: Allow multiple ``@return`` tags on public state variable documentation.\r\n * SMTChecker: Fix internal error on conversion from ``bytes`` to ``fixed bytes``.\r\n * SMTChecker: Fix internal error on external calls from the constructor.\r\n * SMTChecker: Fix internal error on struct constructor with fixed bytes member initialized with string literal.\r\n * Source Locations: Properly set source location of scoped blocks.\r\n * Standard JSON: Properly allow the ``inliner`` setting under ``settings.optimizer.details``.\r\n * Type Checker: Fix internal compiler error related to having mapping types in constructor parameter for abstract contracts.\r\n * Type Checker: Fix internal compiler error when attempting to use an invalid external function type on pre-byzantium EVMs.\r\n * Type Checker: Fix internal compiler error when overriding receive ether function with one having different parameters during inheritance.\r\n * Type Checker: Make errors about (nested) mapping type in event or error parameter into fatal type errors.\r\n * Type Checker: Fix internal compiler error when overriding an implemented modifier with an unimplemented one.\r\n\r\n**AST Changes:**\r\n * Add member `hexValue` for Yul string and hex literals.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\na3d4, Alex Beregszaszi, Alexander Arlt, Anurag Dashputre, Bhargava Shastry, Christian Parpart, cxxboy, Daniel Kirchner, Đorđe Mijović, Franziska Heintel, Harikrishnan Mulackal, Kamil Śliwak, Keqi Huang, Leonardo Alt, Martin Blicha, Mathias Baumann, Maurelian, newbateni, Raphael Roullet, TerranCivilian, Wade Dorrell, William Entriken.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.5.tar.gz and not the zip provided by github directly."
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.5",
            "name": "Version 0.8.5"
          },
          {
            "id": "MDc6UmVsZWFzZTQ1MDI0OTk2",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.6/solidity_0.8.6.tar.gz",
                    "release": {
                      "publishedAt": "2021-06-22T12:30:35Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.6",
                      "id": "MDc6UmVsZWFzZTQ1MDI0OTk2",
                      "name": "Version 0.8.6",
                      "description": "Solidity 0.8.6 fixes some non-critical but annoying bugs, especially a warning about unreachable code that\r\nis in fact reachable.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/22/solidity-0.8.6-release-announcement/).\r\n\r\n**Language Features:**\r\n * Yul: Special meaning of ``\".metadata\"`` data object in Yul object.\r\n\r\n**Bugfixes:**\r\n * Control Flow Graph: Fix incorrectly reported unreachable code.\r\n * Solc-Js: When running ``solcjs`` without the ``--optimize`` flag, use ``settings.optimizer.enabled=false`` in Standard JSON instead of omitting the key.\r\n * Standard JSON: Omitting ``settings.optimizer.enabled`` was not equivalent to setting it to ``false``. It meant disabling also the peephole optimizer and jumpdest remover which by default still run with ``enabled=false``.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Allegheny Crypto, axeldelamarre, Djordje Mijovic, hrkrshnn, jgoodall628, Kamil Śliwak, Leonardo, Mathias Baumann, patekuru, QQ喵, TaldenV\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.6.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.6/solc-macos",
                    "release": {
                      "publishedAt": "2021-06-22T12:30:35Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.6",
                      "id": "MDc6UmVsZWFzZTQ1MDI0OTk2",
                      "name": "Version 0.8.6",
                      "description": "Solidity 0.8.6 fixes some non-critical but annoying bugs, especially a warning about unreachable code that\r\nis in fact reachable.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/22/solidity-0.8.6-release-announcement/).\r\n\r\n**Language Features:**\r\n * Yul: Special meaning of ``\".metadata\"`` data object in Yul object.\r\n\r\n**Bugfixes:**\r\n * Control Flow Graph: Fix incorrectly reported unreachable code.\r\n * Solc-Js: When running ``solcjs`` without the ``--optimize`` flag, use ``settings.optimizer.enabled=false`` in Standard JSON instead of omitting the key.\r\n * Standard JSON: Omitting ``settings.optimizer.enabled`` was not equivalent to setting it to ``false``. It meant disabling also the peephole optimizer and jumpdest remover which by default still run with ``enabled=false``.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Allegheny Crypto, axeldelamarre, Djordje Mijovic, hrkrshnn, jgoodall628, Kamil Śliwak, Leonardo, Mathias Baumann, patekuru, QQ喵, TaldenV\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.6.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.6/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-06-22T12:30:35Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.6",
                      "id": "MDc6UmVsZWFzZTQ1MDI0OTk2",
                      "name": "Version 0.8.6",
                      "description": "Solidity 0.8.6 fixes some non-critical but annoying bugs, especially a warning about unreachable code that\r\nis in fact reachable.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/22/solidity-0.8.6-release-announcement/).\r\n\r\n**Language Features:**\r\n * Yul: Special meaning of ``\".metadata\"`` data object in Yul object.\r\n\r\n**Bugfixes:**\r\n * Control Flow Graph: Fix incorrectly reported unreachable code.\r\n * Solc-Js: When running ``solcjs`` without the ``--optimize`` flag, use ``settings.optimizer.enabled=false`` in Standard JSON instead of omitting the key.\r\n * Standard JSON: Omitting ``settings.optimizer.enabled`` was not equivalent to setting it to ``false``. It meant disabling also the peephole optimizer and jumpdest remover which by default still run with ``enabled=false``.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Allegheny Crypto, axeldelamarre, Djordje Mijovic, hrkrshnn, jgoodall628, Kamil Śliwak, Leonardo, Mathias Baumann, patekuru, QQ喵, TaldenV\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.6.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.6/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-06-22T12:30:35Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.6",
                      "id": "MDc6UmVsZWFzZTQ1MDI0OTk2",
                      "name": "Version 0.8.6",
                      "description": "Solidity 0.8.6 fixes some non-critical but annoying bugs, especially a warning about unreachable code that\r\nis in fact reachable.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/22/solidity-0.8.6-release-announcement/).\r\n\r\n**Language Features:**\r\n * Yul: Special meaning of ``\".metadata\"`` data object in Yul object.\r\n\r\n**Bugfixes:**\r\n * Control Flow Graph: Fix incorrectly reported unreachable code.\r\n * Solc-Js: When running ``solcjs`` without the ``--optimize`` flag, use ``settings.optimizer.enabled=false`` in Standard JSON instead of omitting the key.\r\n * Standard JSON: Omitting ``settings.optimizer.enabled`` was not equivalent to setting it to ``false``. It meant disabling also the peephole optimizer and jumpdest remover which by default still run with ``enabled=false``.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Allegheny Crypto, axeldelamarre, Djordje Mijovic, hrkrshnn, jgoodall628, Kamil Śliwak, Leonardo, Mathias Baumann, patekuru, QQ喵, TaldenV\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.6.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.6/soljson.js",
                    "release": {
                      "publishedAt": "2021-06-22T12:30:35Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.6",
                      "id": "MDc6UmVsZWFzZTQ1MDI0OTk2",
                      "name": "Version 0.8.6",
                      "description": "Solidity 0.8.6 fixes some non-critical but annoying bugs, especially a warning about unreachable code that\r\nis in fact reachable.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/22/solidity-0.8.6-release-announcement/).\r\n\r\n**Language Features:**\r\n * Yul: Special meaning of ``\".metadata\"`` data object in Yul object.\r\n\r\n**Bugfixes:**\r\n * Control Flow Graph: Fix incorrectly reported unreachable code.\r\n * Solc-Js: When running ``solcjs`` without the ``--optimize`` flag, use ``settings.optimizer.enabled=false`` in Standard JSON instead of omitting the key.\r\n * Standard JSON: Omitting ``settings.optimizer.enabled`` was not equivalent to setting it to ``false``. It meant disabling also the peephole optimizer and jumpdest remover which by default still run with ``enabled=false``.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Allegheny Crypto, axeldelamarre, Djordje Mijovic, hrkrshnn, jgoodall628, Kamil Śliwak, Leonardo, Mathias Baumann, patekuru, QQ喵, TaldenV\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.6.tar.gz and not the zip provided by github directly."
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.6",
            "name": "Version 0.8.6"
          },
          {
            "id": "MDc6UmVsZWFzZTQ3NjY0NTYw",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.7/solc-macos",
                    "release": {
                      "publishedAt": "2021-08-11T12:55:33Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.7",
                      "id": "MDc6UmVsZWFzZTQ3NjY0NTYw",
                      "name": "Version 0.8.7",
                      "description": "Solidity v0.8.7 introduces support for the [London upgrade](https://blog.ethereum.org/2021/07/15/london-mainnet-announcement/), includes\r\nvarious improvements to Yul to EVM code transformation, the SMTChecker and some bugfixes.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/08/11/solidity-0.8.7-release-announcement/).\r\n\r\n**Language Features:**\r\n * Introduce global ``block.basefee`` for retrieving the base fee of the current block.\r\n * Yul: Introduce builtin ``basefee()`` for retrieving the base fee of the current block.\r\n\r\n\r\n**Compiler Features:**\r\n * AssemblyStack: Also run opcode-based optimizer when compiling Yul code.\r\n * Commandline Interface: option ``--pretty-json`` works also with ``--standard--json``.\r\n * EVM: Set the default EVM version to \"London\".\r\n * SMTChecker: Do not check underflow and overflow by default.\r\n * SMTChecker: Unproved targets are hidden by default, and the SMTChecker only states how many unproved targets there are. They can be listed using the command line option ``--model-checker-show-unproved`` or the JSON option ``settings.modelChecker.showUnproved``.\r\n * SMTChecker: new setting to enable/disable encoding of division and modulo with slack variables. The command line option is ``--model-checker-div-mod-slacks`` and the JSON option is ``settings.modelChecker.divModWithSlacks``.\r\n * Yul EVM Code Transform: Also pop unused argument slots for functions without return variables (under the same restrictions as for functions with return variables).\r\n * Yul EVM Code Transform: Do not reuse stack slots that immediately become unreachable.\r\n * Yul Optimizer: Move function arguments and return variables to memory with the experimental Stack Limit Evader (which is not enabled by default).\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix crash when passing an empty string literal to ``bytes.concat()``.\r\n * Code Generator: Fix internal compiler error when calling functions bound to calldata structs and arrays.\r\n * Code Generator: Fix internal compiler error when passing a 32-byte hex literal or a zero literal to ``bytes.concat()`` by disallowing such literals.\r\n * Commandline Interface: Apply ``--optimizer-runs`` option in assembly / yul mode.\r\n * Commandline Interface: Fix crash when a directory path is passed to ``--standard-json``.\r\n * Commandline Interface: Read JSON from standard input when ``--standard-json`` gets ``-`` as a file name.\r\n * Standard JSON: Include source location for errors in files with empty name.\r\n * Type Checker: Fix internal error and prevent static calls to unimplemented modifiers.\r\n * Yul Code Generator: Fix internal compiler error when using a long literal with bitwise negation.\r\n * Yul Code Generator: Fix source location references for calls to builtin functions.\r\n * Yul Parser: Fix source location references for ``if`` statements.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlex Beregszaszi, Alexander Arlt, Amid Moeinzadeh, Bhargava Shastry, Christian Parpart, CrimsonGlory, Daniel Kirchner, GuLiPing-Hz, Harikrishnan Mulackal, Josué, Kamil Śliwak, Ladislav Sladecek, Leo Alt, Mathias Baumann, Simon Tian, Tony, chriseth, franzihei, iskanderandrews, jaa2, qedk and t11s.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.7.tar.gz and not the zip provided by github directly.\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.7/soljson.js",
                    "release": {
                      "publishedAt": "2021-08-11T12:55:33Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.7",
                      "id": "MDc6UmVsZWFzZTQ3NjY0NTYw",
                      "name": "Version 0.8.7",
                      "description": "Solidity v0.8.7 introduces support for the [London upgrade](https://blog.ethereum.org/2021/07/15/london-mainnet-announcement/), includes\r\nvarious improvements to Yul to EVM code transformation, the SMTChecker and some bugfixes.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/08/11/solidity-0.8.7-release-announcement/).\r\n\r\n**Language Features:**\r\n * Introduce global ``block.basefee`` for retrieving the base fee of the current block.\r\n * Yul: Introduce builtin ``basefee()`` for retrieving the base fee of the current block.\r\n\r\n\r\n**Compiler Features:**\r\n * AssemblyStack: Also run opcode-based optimizer when compiling Yul code.\r\n * Commandline Interface: option ``--pretty-json`` works also with ``--standard--json``.\r\n * EVM: Set the default EVM version to \"London\".\r\n * SMTChecker: Do not check underflow and overflow by default.\r\n * SMTChecker: Unproved targets are hidden by default, and the SMTChecker only states how many unproved targets there are. They can be listed using the command line option ``--model-checker-show-unproved`` or the JSON option ``settings.modelChecker.showUnproved``.\r\n * SMTChecker: new setting to enable/disable encoding of division and modulo with slack variables. The command line option is ``--model-checker-div-mod-slacks`` and the JSON option is ``settings.modelChecker.divModWithSlacks``.\r\n * Yul EVM Code Transform: Also pop unused argument slots for functions without return variables (under the same restrictions as for functions with return variables).\r\n * Yul EVM Code Transform: Do not reuse stack slots that immediately become unreachable.\r\n * Yul Optimizer: Move function arguments and return variables to memory with the experimental Stack Limit Evader (which is not enabled by default).\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix crash when passing an empty string literal to ``bytes.concat()``.\r\n * Code Generator: Fix internal compiler error when calling functions bound to calldata structs and arrays.\r\n * Code Generator: Fix internal compiler error when passing a 32-byte hex literal or a zero literal to ``bytes.concat()`` by disallowing such literals.\r\n * Commandline Interface: Apply ``--optimizer-runs`` option in assembly / yul mode.\r\n * Commandline Interface: Fix crash when a directory path is passed to ``--standard-json``.\r\n * Commandline Interface: Read JSON from standard input when ``--standard-json`` gets ``-`` as a file name.\r\n * Standard JSON: Include source location for errors in files with empty name.\r\n * Type Checker: Fix internal error and prevent static calls to unimplemented modifiers.\r\n * Yul Code Generator: Fix internal compiler error when using a long literal with bitwise negation.\r\n * Yul Code Generator: Fix source location references for calls to builtin functions.\r\n * Yul Parser: Fix source location references for ``if`` statements.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlex Beregszaszi, Alexander Arlt, Amid Moeinzadeh, Bhargava Shastry, Christian Parpart, CrimsonGlory, Daniel Kirchner, GuLiPing-Hz, Harikrishnan Mulackal, Josué, Kamil Śliwak, Ladislav Sladecek, Leo Alt, Mathias Baumann, Simon Tian, Tony, chriseth, franzihei, iskanderandrews, jaa2, qedk and t11s.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.7.tar.gz and not the zip provided by github directly.\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.7/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-08-11T12:55:33Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.7",
                      "id": "MDc6UmVsZWFzZTQ3NjY0NTYw",
                      "name": "Version 0.8.7",
                      "description": "Solidity v0.8.7 introduces support for the [London upgrade](https://blog.ethereum.org/2021/07/15/london-mainnet-announcement/), includes\r\nvarious improvements to Yul to EVM code transformation, the SMTChecker and some bugfixes.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/08/11/solidity-0.8.7-release-announcement/).\r\n\r\n**Language Features:**\r\n * Introduce global ``block.basefee`` for retrieving the base fee of the current block.\r\n * Yul: Introduce builtin ``basefee()`` for retrieving the base fee of the current block.\r\n\r\n\r\n**Compiler Features:**\r\n * AssemblyStack: Also run opcode-based optimizer when compiling Yul code.\r\n * Commandline Interface: option ``--pretty-json`` works also with ``--standard--json``.\r\n * EVM: Set the default EVM version to \"London\".\r\n * SMTChecker: Do not check underflow and overflow by default.\r\n * SMTChecker: Unproved targets are hidden by default, and the SMTChecker only states how many unproved targets there are. They can be listed using the command line option ``--model-checker-show-unproved`` or the JSON option ``settings.modelChecker.showUnproved``.\r\n * SMTChecker: new setting to enable/disable encoding of division and modulo with slack variables. The command line option is ``--model-checker-div-mod-slacks`` and the JSON option is ``settings.modelChecker.divModWithSlacks``.\r\n * Yul EVM Code Transform: Also pop unused argument slots for functions without return variables (under the same restrictions as for functions with return variables).\r\n * Yul EVM Code Transform: Do not reuse stack slots that immediately become unreachable.\r\n * Yul Optimizer: Move function arguments and return variables to memory with the experimental Stack Limit Evader (which is not enabled by default).\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix crash when passing an empty string literal to ``bytes.concat()``.\r\n * Code Generator: Fix internal compiler error when calling functions bound to calldata structs and arrays.\r\n * Code Generator: Fix internal compiler error when passing a 32-byte hex literal or a zero literal to ``bytes.concat()`` by disallowing such literals.\r\n * Commandline Interface: Apply ``--optimizer-runs`` option in assembly / yul mode.\r\n * Commandline Interface: Fix crash when a directory path is passed to ``--standard-json``.\r\n * Commandline Interface: Read JSON from standard input when ``--standard-json`` gets ``-`` as a file name.\r\n * Standard JSON: Include source location for errors in files with empty name.\r\n * Type Checker: Fix internal error and prevent static calls to unimplemented modifiers.\r\n * Yul Code Generator: Fix internal compiler error when using a long literal with bitwise negation.\r\n * Yul Code Generator: Fix source location references for calls to builtin functions.\r\n * Yul Parser: Fix source location references for ``if`` statements.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlex Beregszaszi, Alexander Arlt, Amid Moeinzadeh, Bhargava Shastry, Christian Parpart, CrimsonGlory, Daniel Kirchner, GuLiPing-Hz, Harikrishnan Mulackal, Josué, Kamil Śliwak, Ladislav Sladecek, Leo Alt, Mathias Baumann, Simon Tian, Tony, chriseth, franzihei, iskanderandrews, jaa2, qedk and t11s.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.7.tar.gz and not the zip provided by github directly.\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.7/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-08-11T12:55:33Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.7",
                      "id": "MDc6UmVsZWFzZTQ3NjY0NTYw",
                      "name": "Version 0.8.7",
                      "description": "Solidity v0.8.7 introduces support for the [London upgrade](https://blog.ethereum.org/2021/07/15/london-mainnet-announcement/), includes\r\nvarious improvements to Yul to EVM code transformation, the SMTChecker and some bugfixes.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/08/11/solidity-0.8.7-release-announcement/).\r\n\r\n**Language Features:**\r\n * Introduce global ``block.basefee`` for retrieving the base fee of the current block.\r\n * Yul: Introduce builtin ``basefee()`` for retrieving the base fee of the current block.\r\n\r\n\r\n**Compiler Features:**\r\n * AssemblyStack: Also run opcode-based optimizer when compiling Yul code.\r\n * Commandline Interface: option ``--pretty-json`` works also with ``--standard--json``.\r\n * EVM: Set the default EVM version to \"London\".\r\n * SMTChecker: Do not check underflow and overflow by default.\r\n * SMTChecker: Unproved targets are hidden by default, and the SMTChecker only states how many unproved targets there are. They can be listed using the command line option ``--model-checker-show-unproved`` or the JSON option ``settings.modelChecker.showUnproved``.\r\n * SMTChecker: new setting to enable/disable encoding of division and modulo with slack variables. The command line option is ``--model-checker-div-mod-slacks`` and the JSON option is ``settings.modelChecker.divModWithSlacks``.\r\n * Yul EVM Code Transform: Also pop unused argument slots for functions without return variables (under the same restrictions as for functions with return variables).\r\n * Yul EVM Code Transform: Do not reuse stack slots that immediately become unreachable.\r\n * Yul Optimizer: Move function arguments and return variables to memory with the experimental Stack Limit Evader (which is not enabled by default).\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix crash when passing an empty string literal to ``bytes.concat()``.\r\n * Code Generator: Fix internal compiler error when calling functions bound to calldata structs and arrays.\r\n * Code Generator: Fix internal compiler error when passing a 32-byte hex literal or a zero literal to ``bytes.concat()`` by disallowing such literals.\r\n * Commandline Interface: Apply ``--optimizer-runs`` option in assembly / yul mode.\r\n * Commandline Interface: Fix crash when a directory path is passed to ``--standard-json``.\r\n * Commandline Interface: Read JSON from standard input when ``--standard-json`` gets ``-`` as a file name.\r\n * Standard JSON: Include source location for errors in files with empty name.\r\n * Type Checker: Fix internal error and prevent static calls to unimplemented modifiers.\r\n * Yul Code Generator: Fix internal compiler error when using a long literal with bitwise negation.\r\n * Yul Code Generator: Fix source location references for calls to builtin functions.\r\n * Yul Parser: Fix source location references for ``if`` statements.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlex Beregszaszi, Alexander Arlt, Amid Moeinzadeh, Bhargava Shastry, Christian Parpart, CrimsonGlory, Daniel Kirchner, GuLiPing-Hz, Harikrishnan Mulackal, Josué, Kamil Śliwak, Ladislav Sladecek, Leo Alt, Mathias Baumann, Simon Tian, Tony, chriseth, franzihei, iskanderandrews, jaa2, qedk and t11s.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.7.tar.gz and not the zip provided by github directly.\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.7/solidity_0.8.7.tar.gz",
                    "release": {
                      "publishedAt": "2021-08-11T12:55:33Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.7",
                      "id": "MDc6UmVsZWFzZTQ3NjY0NTYw",
                      "name": "Version 0.8.7",
                      "description": "Solidity v0.8.7 introduces support for the [London upgrade](https://blog.ethereum.org/2021/07/15/london-mainnet-announcement/), includes\r\nvarious improvements to Yul to EVM code transformation, the SMTChecker and some bugfixes.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/08/11/solidity-0.8.7-release-announcement/).\r\n\r\n**Language Features:**\r\n * Introduce global ``block.basefee`` for retrieving the base fee of the current block.\r\n * Yul: Introduce builtin ``basefee()`` for retrieving the base fee of the current block.\r\n\r\n\r\n**Compiler Features:**\r\n * AssemblyStack: Also run opcode-based optimizer when compiling Yul code.\r\n * Commandline Interface: option ``--pretty-json`` works also with ``--standard--json``.\r\n * EVM: Set the default EVM version to \"London\".\r\n * SMTChecker: Do not check underflow and overflow by default.\r\n * SMTChecker: Unproved targets are hidden by default, and the SMTChecker only states how many unproved targets there are. They can be listed using the command line option ``--model-checker-show-unproved`` or the JSON option ``settings.modelChecker.showUnproved``.\r\n * SMTChecker: new setting to enable/disable encoding of division and modulo with slack variables. The command line option is ``--model-checker-div-mod-slacks`` and the JSON option is ``settings.modelChecker.divModWithSlacks``.\r\n * Yul EVM Code Transform: Also pop unused argument slots for functions without return variables (under the same restrictions as for functions with return variables).\r\n * Yul EVM Code Transform: Do not reuse stack slots that immediately become unreachable.\r\n * Yul Optimizer: Move function arguments and return variables to memory with the experimental Stack Limit Evader (which is not enabled by default).\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix crash when passing an empty string literal to ``bytes.concat()``.\r\n * Code Generator: Fix internal compiler error when calling functions bound to calldata structs and arrays.\r\n * Code Generator: Fix internal compiler error when passing a 32-byte hex literal or a zero literal to ``bytes.concat()`` by disallowing such literals.\r\n * Commandline Interface: Apply ``--optimizer-runs`` option in assembly / yul mode.\r\n * Commandline Interface: Fix crash when a directory path is passed to ``--standard-json``.\r\n * Commandline Interface: Read JSON from standard input when ``--standard-json`` gets ``-`` as a file name.\r\n * Standard JSON: Include source location for errors in files with empty name.\r\n * Type Checker: Fix internal error and prevent static calls to unimplemented modifiers.\r\n * Yul Code Generator: Fix internal compiler error when using a long literal with bitwise negation.\r\n * Yul Code Generator: Fix source location references for calls to builtin functions.\r\n * Yul Parser: Fix source location references for ``if`` statements.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlex Beregszaszi, Alexander Arlt, Amid Moeinzadeh, Bhargava Shastry, Christian Parpart, CrimsonGlory, Daniel Kirchner, GuLiPing-Hz, Harikrishnan Mulackal, Josué, Kamil Śliwak, Ladislav Sladecek, Leo Alt, Mathias Baumann, Simon Tian, Tony, chriseth, franzihei, iskanderandrews, jaa2, qedk and t11s.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.7.tar.gz and not the zip provided by github directly.\r\n"
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.7",
            "name": "Version 0.8.7"
          },
          {
            "id": "RE_kwDOAm_5kc4C_-Hv",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.8/solc-macos",
                    "release": {
                      "publishedAt": "2021-09-27T16:12:56Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.8",
                      "id": "RE_kwDOAm_5kc4C_-Hv",
                      "name": "Version 0.8.8",
                      "description": "Solidity v0.8.8 introduces user defined value types as a major feature, improves overriding interface functions and reading from immutables. Apart from bugfixes, we also cleaned up the command-line interface and improved the way the\r\nimport mechanism resolves files.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/27/solidity-0.8.8-release-announcement/).\r\n\r\n**Language Features:**\r\n * Inheritance: A function that overrides only a single interface function does not require the ``override`` specifier.\r\n * Type System: Support ``type(E).min`` and ``type(E).max`` for enums.\r\n * User Defined Value Type: allows creating a zero cost abstraction over a value type with stricter type requirements.\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--include-path`` option for specifying extra directories that may contain importable code (e.g. packaged third-party libraries).\r\n * Commandline Interface: Do not implicitly run evm bytecode generation unless needed for the requested output.\r\n * Commandline Interface: Normalize paths specified on the command line and make them relative for files located inside base path and/or include paths.\r\n * Immutable variables can be read at construction time once they are initialized.\r\n * SMTChecker: Add constraints to better correlate ``address(this).balance`` and ``msg.value``.\r\n * SMTChecker: Support constants via modules.\r\n * SMTChecker: Support low level ``call`` as external calls to unknown code.\r\n * SMTChecker: Support the ``value`` option for external function calls.\r\n * SMTChecker: Support user defined value types.\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix ICE on assigning to calldata structs and statically-sized calldata arrays in inline assembly.\r\n * Code Generator: Use stable source order for ABI functions.\r\n * Commandline Interface: Disallow the ``--experimental-via-ir`` option in Standard JSON, Assembler and Linker modes.\r\n * Commandline Interface: Fix resolution of paths whitelisted with ``--allowed-paths`` or implicitly due to base path, remappings and files being compiled. Correctly handle paths that do not match imports exactly due to being relative, non-normalized or empty.\r\n * Commandline Interface: Report optimizer options as invalid in Standard JSON and linker modes instead of ignoring them.\r\n * Name Resolver: Fix that when importing an aliased symbol using ``import {AliasedName} from \"a.sol\"`` it would use the original name of the symbol and not the aliased one.\r\n * Opcode Optimizer: Prevent the optimizer from running multiple times to avoid potential bytecode differences for referenced code.\r\n * Parser: Properly check for multiple SPDX license identifiers next to each other and validate them.\r\n * SMTChecker: Fix BMC's constraints regarding internal functions.\r\n * SMTChecker: Fix false negative caused by ``push`` on storage array references returned by internal functions.\r\n * SMTChecker: Fix false positive in external calls from constructors.\r\n * SMTChecker: Fix internal error on some multi-source uses of ``abi.*``, cryptographic functions and constants.\r\n * Standard JSON: Fix non-fatal errors in Yul mode being discarded if followed by a fatal error.\r\n * Type Checker: Correct wrong error message in inline assembly complaining about ``.slot`` or ``.offset` not valid when actually ``.length`` was used.\r\n * Type Checker: Disallow modifier declarations and definitions in interfaces.\r\n * Yul Optimizer: Fix a crash in LoadResolver, when ``keccak256`` has particular non-identifier arguments.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAhmed Ali, Alessandro Coglio, Alex Beregszaszi, Alexander Arlt, Andrew Lyndem, Basit Raza, benldrmn, Bhargava Shastry, CrimsonGlory, Daniel Kirchner, Harikrishnan Mulackal, hawkess, istareatscreens, John Adler, Kamil Śliwak, Leonardo Alt, Marenz, Midhun07, Nikita Stupin, Paul Razvan Berg, priyansh786, Sean Hawkes, soroosh-sdi, Sreekesh V, yatharthagoenka\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.8.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.8/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-09-27T16:12:56Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.8",
                      "id": "RE_kwDOAm_5kc4C_-Hv",
                      "name": "Version 0.8.8",
                      "description": "Solidity v0.8.8 introduces user defined value types as a major feature, improves overriding interface functions and reading from immutables. Apart from bugfixes, we also cleaned up the command-line interface and improved the way the\r\nimport mechanism resolves files.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/27/solidity-0.8.8-release-announcement/).\r\n\r\n**Language Features:**\r\n * Inheritance: A function that overrides only a single interface function does not require the ``override`` specifier.\r\n * Type System: Support ``type(E).min`` and ``type(E).max`` for enums.\r\n * User Defined Value Type: allows creating a zero cost abstraction over a value type with stricter type requirements.\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--include-path`` option for specifying extra directories that may contain importable code (e.g. packaged third-party libraries).\r\n * Commandline Interface: Do not implicitly run evm bytecode generation unless needed for the requested output.\r\n * Commandline Interface: Normalize paths specified on the command line and make them relative for files located inside base path and/or include paths.\r\n * Immutable variables can be read at construction time once they are initialized.\r\n * SMTChecker: Add constraints to better correlate ``address(this).balance`` and ``msg.value``.\r\n * SMTChecker: Support constants via modules.\r\n * SMTChecker: Support low level ``call`` as external calls to unknown code.\r\n * SMTChecker: Support the ``value`` option for external function calls.\r\n * SMTChecker: Support user defined value types.\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix ICE on assigning to calldata structs and statically-sized calldata arrays in inline assembly.\r\n * Code Generator: Use stable source order for ABI functions.\r\n * Commandline Interface: Disallow the ``--experimental-via-ir`` option in Standard JSON, Assembler and Linker modes.\r\n * Commandline Interface: Fix resolution of paths whitelisted with ``--allowed-paths`` or implicitly due to base path, remappings and files being compiled. Correctly handle paths that do not match imports exactly due to being relative, non-normalized or empty.\r\n * Commandline Interface: Report optimizer options as invalid in Standard JSON and linker modes instead of ignoring them.\r\n * Name Resolver: Fix that when importing an aliased symbol using ``import {AliasedName} from \"a.sol\"`` it would use the original name of the symbol and not the aliased one.\r\n * Opcode Optimizer: Prevent the optimizer from running multiple times to avoid potential bytecode differences for referenced code.\r\n * Parser: Properly check for multiple SPDX license identifiers next to each other and validate them.\r\n * SMTChecker: Fix BMC's constraints regarding internal functions.\r\n * SMTChecker: Fix false negative caused by ``push`` on storage array references returned by internal functions.\r\n * SMTChecker: Fix false positive in external calls from constructors.\r\n * SMTChecker: Fix internal error on some multi-source uses of ``abi.*``, cryptographic functions and constants.\r\n * Standard JSON: Fix non-fatal errors in Yul mode being discarded if followed by a fatal error.\r\n * Type Checker: Correct wrong error message in inline assembly complaining about ``.slot`` or ``.offset` not valid when actually ``.length`` was used.\r\n * Type Checker: Disallow modifier declarations and definitions in interfaces.\r\n * Yul Optimizer: Fix a crash in LoadResolver, when ``keccak256`` has particular non-identifier arguments.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAhmed Ali, Alessandro Coglio, Alex Beregszaszi, Alexander Arlt, Andrew Lyndem, Basit Raza, benldrmn, Bhargava Shastry, CrimsonGlory, Daniel Kirchner, Harikrishnan Mulackal, hawkess, istareatscreens, John Adler, Kamil Śliwak, Leonardo Alt, Marenz, Midhun07, Nikita Stupin, Paul Razvan Berg, priyansh786, Sean Hawkes, soroosh-sdi, Sreekesh V, yatharthagoenka\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.8.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.8/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-09-27T16:12:56Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.8",
                      "id": "RE_kwDOAm_5kc4C_-Hv",
                      "name": "Version 0.8.8",
                      "description": "Solidity v0.8.8 introduces user defined value types as a major feature, improves overriding interface functions and reading from immutables. Apart from bugfixes, we also cleaned up the command-line interface and improved the way the\r\nimport mechanism resolves files.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/27/solidity-0.8.8-release-announcement/).\r\n\r\n**Language Features:**\r\n * Inheritance: A function that overrides only a single interface function does not require the ``override`` specifier.\r\n * Type System: Support ``type(E).min`` and ``type(E).max`` for enums.\r\n * User Defined Value Type: allows creating a zero cost abstraction over a value type with stricter type requirements.\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--include-path`` option for specifying extra directories that may contain importable code (e.g. packaged third-party libraries).\r\n * Commandline Interface: Do not implicitly run evm bytecode generation unless needed for the requested output.\r\n * Commandline Interface: Normalize paths specified on the command line and make them relative for files located inside base path and/or include paths.\r\n * Immutable variables can be read at construction time once they are initialized.\r\n * SMTChecker: Add constraints to better correlate ``address(this).balance`` and ``msg.value``.\r\n * SMTChecker: Support constants via modules.\r\n * SMTChecker: Support low level ``call`` as external calls to unknown code.\r\n * SMTChecker: Support the ``value`` option for external function calls.\r\n * SMTChecker: Support user defined value types.\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix ICE on assigning to calldata structs and statically-sized calldata arrays in inline assembly.\r\n * Code Generator: Use stable source order for ABI functions.\r\n * Commandline Interface: Disallow the ``--experimental-via-ir`` option in Standard JSON, Assembler and Linker modes.\r\n * Commandline Interface: Fix resolution of paths whitelisted with ``--allowed-paths`` or implicitly due to base path, remappings and files being compiled. Correctly handle paths that do not match imports exactly due to being relative, non-normalized or empty.\r\n * Commandline Interface: Report optimizer options as invalid in Standard JSON and linker modes instead of ignoring them.\r\n * Name Resolver: Fix that when importing an aliased symbol using ``import {AliasedName} from \"a.sol\"`` it would use the original name of the symbol and not the aliased one.\r\n * Opcode Optimizer: Prevent the optimizer from running multiple times to avoid potential bytecode differences for referenced code.\r\n * Parser: Properly check for multiple SPDX license identifiers next to each other and validate them.\r\n * SMTChecker: Fix BMC's constraints regarding internal functions.\r\n * SMTChecker: Fix false negative caused by ``push`` on storage array references returned by internal functions.\r\n * SMTChecker: Fix false positive in external calls from constructors.\r\n * SMTChecker: Fix internal error on some multi-source uses of ``abi.*``, cryptographic functions and constants.\r\n * Standard JSON: Fix non-fatal errors in Yul mode being discarded if followed by a fatal error.\r\n * Type Checker: Correct wrong error message in inline assembly complaining about ``.slot`` or ``.offset` not valid when actually ``.length`` was used.\r\n * Type Checker: Disallow modifier declarations and definitions in interfaces.\r\n * Yul Optimizer: Fix a crash in LoadResolver, when ``keccak256`` has particular non-identifier arguments.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAhmed Ali, Alessandro Coglio, Alex Beregszaszi, Alexander Arlt, Andrew Lyndem, Basit Raza, benldrmn, Bhargava Shastry, CrimsonGlory, Daniel Kirchner, Harikrishnan Mulackal, hawkess, istareatscreens, John Adler, Kamil Śliwak, Leonardo Alt, Marenz, Midhun07, Nikita Stupin, Paul Razvan Berg, priyansh786, Sean Hawkes, soroosh-sdi, Sreekesh V, yatharthagoenka\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.8.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.8/soljson.js",
                    "release": {
                      "publishedAt": "2021-09-27T16:12:56Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.8",
                      "id": "RE_kwDOAm_5kc4C_-Hv",
                      "name": "Version 0.8.8",
                      "description": "Solidity v0.8.8 introduces user defined value types as a major feature, improves overriding interface functions and reading from immutables. Apart from bugfixes, we also cleaned up the command-line interface and improved the way the\r\nimport mechanism resolves files.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/27/solidity-0.8.8-release-announcement/).\r\n\r\n**Language Features:**\r\n * Inheritance: A function that overrides only a single interface function does not require the ``override`` specifier.\r\n * Type System: Support ``type(E).min`` and ``type(E).max`` for enums.\r\n * User Defined Value Type: allows creating a zero cost abstraction over a value type with stricter type requirements.\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--include-path`` option for specifying extra directories that may contain importable code (e.g. packaged third-party libraries).\r\n * Commandline Interface: Do not implicitly run evm bytecode generation unless needed for the requested output.\r\n * Commandline Interface: Normalize paths specified on the command line and make them relative for files located inside base path and/or include paths.\r\n * Immutable variables can be read at construction time once they are initialized.\r\n * SMTChecker: Add constraints to better correlate ``address(this).balance`` and ``msg.value``.\r\n * SMTChecker: Support constants via modules.\r\n * SMTChecker: Support low level ``call`` as external calls to unknown code.\r\n * SMTChecker: Support the ``value`` option for external function calls.\r\n * SMTChecker: Support user defined value types.\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix ICE on assigning to calldata structs and statically-sized calldata arrays in inline assembly.\r\n * Code Generator: Use stable source order for ABI functions.\r\n * Commandline Interface: Disallow the ``--experimental-via-ir`` option in Standard JSON, Assembler and Linker modes.\r\n * Commandline Interface: Fix resolution of paths whitelisted with ``--allowed-paths`` or implicitly due to base path, remappings and files being compiled. Correctly handle paths that do not match imports exactly due to being relative, non-normalized or empty.\r\n * Commandline Interface: Report optimizer options as invalid in Standard JSON and linker modes instead of ignoring them.\r\n * Name Resolver: Fix that when importing an aliased symbol using ``import {AliasedName} from \"a.sol\"`` it would use the original name of the symbol and not the aliased one.\r\n * Opcode Optimizer: Prevent the optimizer from running multiple times to avoid potential bytecode differences for referenced code.\r\n * Parser: Properly check for multiple SPDX license identifiers next to each other and validate them.\r\n * SMTChecker: Fix BMC's constraints regarding internal functions.\r\n * SMTChecker: Fix false negative caused by ``push`` on storage array references returned by internal functions.\r\n * SMTChecker: Fix false positive in external calls from constructors.\r\n * SMTChecker: Fix internal error on some multi-source uses of ``abi.*``, cryptographic functions and constants.\r\n * Standard JSON: Fix non-fatal errors in Yul mode being discarded if followed by a fatal error.\r\n * Type Checker: Correct wrong error message in inline assembly complaining about ``.slot`` or ``.offset` not valid when actually ``.length`` was used.\r\n * Type Checker: Disallow modifier declarations and definitions in interfaces.\r\n * Yul Optimizer: Fix a crash in LoadResolver, when ``keccak256`` has particular non-identifier arguments.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAhmed Ali, Alessandro Coglio, Alex Beregszaszi, Alexander Arlt, Andrew Lyndem, Basit Raza, benldrmn, Bhargava Shastry, CrimsonGlory, Daniel Kirchner, Harikrishnan Mulackal, hawkess, istareatscreens, John Adler, Kamil Śliwak, Leonardo Alt, Marenz, Midhun07, Nikita Stupin, Paul Razvan Berg, priyansh786, Sean Hawkes, soroosh-sdi, Sreekesh V, yatharthagoenka\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.8.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.8/solidity_0.8.8.tar.gz",
                    "release": {
                      "publishedAt": "2021-09-27T16:12:56Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.8",
                      "id": "RE_kwDOAm_5kc4C_-Hv",
                      "name": "Version 0.8.8",
                      "description": "Solidity v0.8.8 introduces user defined value types as a major feature, improves overriding interface functions and reading from immutables. Apart from bugfixes, we also cleaned up the command-line interface and improved the way the\r\nimport mechanism resolves files.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/27/solidity-0.8.8-release-announcement/).\r\n\r\n**Language Features:**\r\n * Inheritance: A function that overrides only a single interface function does not require the ``override`` specifier.\r\n * Type System: Support ``type(E).min`` and ``type(E).max`` for enums.\r\n * User Defined Value Type: allows creating a zero cost abstraction over a value type with stricter type requirements.\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--include-path`` option for specifying extra directories that may contain importable code (e.g. packaged third-party libraries).\r\n * Commandline Interface: Do not implicitly run evm bytecode generation unless needed for the requested output.\r\n * Commandline Interface: Normalize paths specified on the command line and make them relative for files located inside base path and/or include paths.\r\n * Immutable variables can be read at construction time once they are initialized.\r\n * SMTChecker: Add constraints to better correlate ``address(this).balance`` and ``msg.value``.\r\n * SMTChecker: Support constants via modules.\r\n * SMTChecker: Support low level ``call`` as external calls to unknown code.\r\n * SMTChecker: Support the ``value`` option for external function calls.\r\n * SMTChecker: Support user defined value types.\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix ICE on assigning to calldata structs and statically-sized calldata arrays in inline assembly.\r\n * Code Generator: Use stable source order for ABI functions.\r\n * Commandline Interface: Disallow the ``--experimental-via-ir`` option in Standard JSON, Assembler and Linker modes.\r\n * Commandline Interface: Fix resolution of paths whitelisted with ``--allowed-paths`` or implicitly due to base path, remappings and files being compiled. Correctly handle paths that do not match imports exactly due to being relative, non-normalized or empty.\r\n * Commandline Interface: Report optimizer options as invalid in Standard JSON and linker modes instead of ignoring them.\r\n * Name Resolver: Fix that when importing an aliased symbol using ``import {AliasedName} from \"a.sol\"`` it would use the original name of the symbol and not the aliased one.\r\n * Opcode Optimizer: Prevent the optimizer from running multiple times to avoid potential bytecode differences for referenced code.\r\n * Parser: Properly check for multiple SPDX license identifiers next to each other and validate them.\r\n * SMTChecker: Fix BMC's constraints regarding internal functions.\r\n * SMTChecker: Fix false negative caused by ``push`` on storage array references returned by internal functions.\r\n * SMTChecker: Fix false positive in external calls from constructors.\r\n * SMTChecker: Fix internal error on some multi-source uses of ``abi.*``, cryptographic functions and constants.\r\n * Standard JSON: Fix non-fatal errors in Yul mode being discarded if followed by a fatal error.\r\n * Type Checker: Correct wrong error message in inline assembly complaining about ``.slot`` or ``.offset` not valid when actually ``.length`` was used.\r\n * Type Checker: Disallow modifier declarations and definitions in interfaces.\r\n * Yul Optimizer: Fix a crash in LoadResolver, when ``keccak256`` has particular non-identifier arguments.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAhmed Ali, Alessandro Coglio, Alex Beregszaszi, Alexander Arlt, Andrew Lyndem, Basit Raza, benldrmn, Bhargava Shastry, CrimsonGlory, Daniel Kirchner, Harikrishnan Mulackal, hawkess, istareatscreens, John Adler, Kamil Śliwak, Leonardo Alt, Marenz, Midhun07, Nikita Stupin, Paul Razvan Berg, priyansh786, Sean Hawkes, soroosh-sdi, Sreekesh V, yatharthagoenka\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.8.tar.gz and not the zip provided by github directly."
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.8",
            "name": "Version 0.8.8"
          },
          {
            "id": "RE_kwDOAm_5kc4DAg6L",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.9/solidity_0.8.9.tar.gz",
                    "release": {
                      "publishedAt": "2021-09-29T14:13:14Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.9",
                      "id": "RE_kwDOAm_5kc4DAg6L",
                      "name": "Version 0.8.9",
                      "description": "Solidity v0.8.9 is a pure bugfix release and fixes two important, but low severity, bugs.\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/29/solidity-0.8.9-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Immutables: Properly perform sign extension on signed immutables.\r\n * User Defined Value Type: Fix storage layout of user defined value types for underlying types shorter than 32 bytes.\r\n\r\n\r\n**Bugfixes:**\r\n * AST: Export ``canonicalName`` for ``UserDefinedValueTypeDefinition`` and ``ContractDefinition``.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.9.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.9/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-09-29T14:13:14Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.9",
                      "id": "RE_kwDOAm_5kc4DAg6L",
                      "name": "Version 0.8.9",
                      "description": "Solidity v0.8.9 is a pure bugfix release and fixes two important, but low severity, bugs.\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/29/solidity-0.8.9-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Immutables: Properly perform sign extension on signed immutables.\r\n * User Defined Value Type: Fix storage layout of user defined value types for underlying types shorter than 32 bytes.\r\n\r\n\r\n**Bugfixes:**\r\n * AST: Export ``canonicalName`` for ``UserDefinedValueTypeDefinition`` and ``ContractDefinition``.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.9.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.9/soljson.js",
                    "release": {
                      "publishedAt": "2021-09-29T14:13:14Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.9",
                      "id": "RE_kwDOAm_5kc4DAg6L",
                      "name": "Version 0.8.9",
                      "description": "Solidity v0.8.9 is a pure bugfix release and fixes two important, but low severity, bugs.\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/29/solidity-0.8.9-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Immutables: Properly perform sign extension on signed immutables.\r\n * User Defined Value Type: Fix storage layout of user defined value types for underlying types shorter than 32 bytes.\r\n\r\n\r\n**Bugfixes:**\r\n * AST: Export ``canonicalName`` for ``UserDefinedValueTypeDefinition`` and ``ContractDefinition``.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.9.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.9/solc-macos",
                    "release": {
                      "publishedAt": "2021-09-29T14:13:14Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.9",
                      "id": "RE_kwDOAm_5kc4DAg6L",
                      "name": "Version 0.8.9",
                      "description": "Solidity v0.8.9 is a pure bugfix release and fixes two important, but low severity, bugs.\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/29/solidity-0.8.9-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Immutables: Properly perform sign extension on signed immutables.\r\n * User Defined Value Type: Fix storage layout of user defined value types for underlying types shorter than 32 bytes.\r\n\r\n\r\n**Bugfixes:**\r\n * AST: Export ``canonicalName`` for ``UserDefinedValueTypeDefinition`` and ``ContractDefinition``.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.9.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.9/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-09-29T14:13:14Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.9",
                      "id": "RE_kwDOAm_5kc4DAg6L",
                      "name": "Version 0.8.9",
                      "description": "Solidity v0.8.9 is a pure bugfix release and fixes two important, but low severity, bugs.\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/29/solidity-0.8.9-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Immutables: Properly perform sign extension on signed immutables.\r\n * User Defined Value Type: Fix storage layout of user defined value types for underlying types shorter than 32 bytes.\r\n\r\n\r\n**Bugfixes:**\r\n * AST: Export ``canonicalName`` for ``UserDefinedValueTypeDefinition`` and ``ContractDefinition``.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.9.tar.gz and not the zip provided by github directly."
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.9",
            "name": "Version 0.8.9"
          },
          {
            "id": "RE_kwDOAm_5kc4DKIQH",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.10/solc-macos",
                    "release": {
                      "publishedAt": "2021-11-09T09:42:05Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.10",
                      "id": "RE_kwDOAm_5kc4DKIQH",
                      "name": "Version 0.8.10",
                      "description": "Solidity v0.8.10 can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enabled the new EVM code generator for pure Yul mode.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/).\r\n\r\n\r\n**Language Features:**\r\n * Inline Assembly: Support ``.address`` and ``.selector`` on external function pointers to access their address and function selector.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist.\r\n * Commandline Interface: Accept nested brackets in step sequences passed to ``--yul-optimizations``.\r\n * Commandline Interface: Add ``--debug-info`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Commandline Interface: Support ``--asm``, ``--bin``, ``--ir-optimized``, ``--ewasm`` and ``--ewasm-ir`` output selection options in assembler mode.\r\n * Commandline Interface: Use different colors when printing errors, warnings and infos.\r\n * JSON AST: Set absolute paths of imports earlier, in the ``parsing`` stage.\r\n * SMTChecker: Output values for ``block.*``, ``msg.*`` and ``tx.*`` variables that are present in the called functions.\r\n * SMTChecker: Report contract invariants and reentrancy properties. This can be enabled via the CLI option ``--model-checker-invariants`` or the Standard JSON option ``settings.modelChecker.invariants``.\r\n * Standard JSON: Accept nested brackets in step sequences passed to ``settings.optimizer.details.yulDetails.optimizerSteps``.\r\n * Standard JSON: Add ``settings.debug.debugInfo`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Yul EVM Code Transform: Switch to new optimized code transform when compiling via Yul with enabled optimizer.\r\n * Yul Optimizer: Take control-flow side-effects of user-defined functions into account in various optimizer steps.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix constructor source mappings for immutables.\r\n * Commandline Interface: Disallow ``--error-recovery`` option outside of the compiler mode.\r\n * Commandline Interface: Don't return zero exit code when writing linked files to disk fails.\r\n * Commandline Interface: Fix extra newline character being appended to sources passed through standard input, affecting their hashes.\r\n * Commandline Interface: Report output selection options unsupported by the selected input mode instead of ignoring them.\r\n * Commandline Interface: When linking only accept exact matches for library names passed to the ``--libraries`` option. Library names not prefixed with a file name used to match any library with that name.\r\n * SMTChecker: Fix internal error in magic type access (``block``, ``msg``, ``tx``).\r\n * SMTChecker: Fix internal error in the CHC engine when passing gas in the function options.\r\n * TypeChecker: Fix internal error when using arrays and structs with user defined value types before declaration.\r\n * TypeChecker: Fix internal error when using user defined value types in public library functions.\r\n * TypeChecker: Improved error message for constant variables with (nested) mapping types.\r\n * Yul Assembler: Fix internal error when function names are not unique.\r\n * Yul IR Generator: Do not output empty switches/if-bodies for empty contracts.\r\n\r\n\r\n**Important Bugfixes in Experimental Features:**\r\n * Yul IR Generator: Changes to function return variables referenced in modifier invocation arguments were not properly forwarded if there was more than one return variable.\r\n\r\n\r\n**Build System:**\r\n * Pass linker-only emscripten options only when linking.\r\n * Remove obsolete compatibility workaround for emscripten builds.\r\n * Update emscripten to version 2.0.33.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\n4molybdenum2, Adam Bliss, Alex Beregszaszi, Christian Parpart, Daniel Kirchner, David Dzhalaev, Derek Brans, Gyeonghun Park, Harikrishnan Mulackal, José López, Kamil Śliwak, Leo Arias, Leonardo Alt, Mariela Mantle, Mathias Baumann, Midhun07, Mikko Ohtamaa, MrBrain295, Saurabh Sharma, sgmoore, shikharvashistha, Shivam Rajput, soroosh-sdi, Sreekesh V, tcoyvwac, TerranCivilian, vowchick, William Entriken, Zachinquarantine\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.10.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.10/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-11-09T09:42:05Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.10",
                      "id": "RE_kwDOAm_5kc4DKIQH",
                      "name": "Version 0.8.10",
                      "description": "Solidity v0.8.10 can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enabled the new EVM code generator for pure Yul mode.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/).\r\n\r\n\r\n**Language Features:**\r\n * Inline Assembly: Support ``.address`` and ``.selector`` on external function pointers to access their address and function selector.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist.\r\n * Commandline Interface: Accept nested brackets in step sequences passed to ``--yul-optimizations``.\r\n * Commandline Interface: Add ``--debug-info`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Commandline Interface: Support ``--asm``, ``--bin``, ``--ir-optimized``, ``--ewasm`` and ``--ewasm-ir`` output selection options in assembler mode.\r\n * Commandline Interface: Use different colors when printing errors, warnings and infos.\r\n * JSON AST: Set absolute paths of imports earlier, in the ``parsing`` stage.\r\n * SMTChecker: Output values for ``block.*``, ``msg.*`` and ``tx.*`` variables that are present in the called functions.\r\n * SMTChecker: Report contract invariants and reentrancy properties. This can be enabled via the CLI option ``--model-checker-invariants`` or the Standard JSON option ``settings.modelChecker.invariants``.\r\n * Standard JSON: Accept nested brackets in step sequences passed to ``settings.optimizer.details.yulDetails.optimizerSteps``.\r\n * Standard JSON: Add ``settings.debug.debugInfo`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Yul EVM Code Transform: Switch to new optimized code transform when compiling via Yul with enabled optimizer.\r\n * Yul Optimizer: Take control-flow side-effects of user-defined functions into account in various optimizer steps.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix constructor source mappings for immutables.\r\n * Commandline Interface: Disallow ``--error-recovery`` option outside of the compiler mode.\r\n * Commandline Interface: Don't return zero exit code when writing linked files to disk fails.\r\n * Commandline Interface: Fix extra newline character being appended to sources passed through standard input, affecting their hashes.\r\n * Commandline Interface: Report output selection options unsupported by the selected input mode instead of ignoring them.\r\n * Commandline Interface: When linking only accept exact matches for library names passed to the ``--libraries`` option. Library names not prefixed with a file name used to match any library with that name.\r\n * SMTChecker: Fix internal error in magic type access (``block``, ``msg``, ``tx``).\r\n * SMTChecker: Fix internal error in the CHC engine when passing gas in the function options.\r\n * TypeChecker: Fix internal error when using arrays and structs with user defined value types before declaration.\r\n * TypeChecker: Fix internal error when using user defined value types in public library functions.\r\n * TypeChecker: Improved error message for constant variables with (nested) mapping types.\r\n * Yul Assembler: Fix internal error when function names are not unique.\r\n * Yul IR Generator: Do not output empty switches/if-bodies for empty contracts.\r\n\r\n\r\n**Important Bugfixes in Experimental Features:**\r\n * Yul IR Generator: Changes to function return variables referenced in modifier invocation arguments were not properly forwarded if there was more than one return variable.\r\n\r\n\r\n**Build System:**\r\n * Pass linker-only emscripten options only when linking.\r\n * Remove obsolete compatibility workaround for emscripten builds.\r\n * Update emscripten to version 2.0.33.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\n4molybdenum2, Adam Bliss, Alex Beregszaszi, Christian Parpart, Daniel Kirchner, David Dzhalaev, Derek Brans, Gyeonghun Park, Harikrishnan Mulackal, José López, Kamil Śliwak, Leo Arias, Leonardo Alt, Mariela Mantle, Mathias Baumann, Midhun07, Mikko Ohtamaa, MrBrain295, Saurabh Sharma, sgmoore, shikharvashistha, Shivam Rajput, soroosh-sdi, Sreekesh V, tcoyvwac, TerranCivilian, vowchick, William Entriken, Zachinquarantine\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.10.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.10/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-11-09T09:42:05Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.10",
                      "id": "RE_kwDOAm_5kc4DKIQH",
                      "name": "Version 0.8.10",
                      "description": "Solidity v0.8.10 can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enabled the new EVM code generator for pure Yul mode.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/).\r\n\r\n\r\n**Language Features:**\r\n * Inline Assembly: Support ``.address`` and ``.selector`` on external function pointers to access their address and function selector.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist.\r\n * Commandline Interface: Accept nested brackets in step sequences passed to ``--yul-optimizations``.\r\n * Commandline Interface: Add ``--debug-info`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Commandline Interface: Support ``--asm``, ``--bin``, ``--ir-optimized``, ``--ewasm`` and ``--ewasm-ir`` output selection options in assembler mode.\r\n * Commandline Interface: Use different colors when printing errors, warnings and infos.\r\n * JSON AST: Set absolute paths of imports earlier, in the ``parsing`` stage.\r\n * SMTChecker: Output values for ``block.*``, ``msg.*`` and ``tx.*`` variables that are present in the called functions.\r\n * SMTChecker: Report contract invariants and reentrancy properties. This can be enabled via the CLI option ``--model-checker-invariants`` or the Standard JSON option ``settings.modelChecker.invariants``.\r\n * Standard JSON: Accept nested brackets in step sequences passed to ``settings.optimizer.details.yulDetails.optimizerSteps``.\r\n * Standard JSON: Add ``settings.debug.debugInfo`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Yul EVM Code Transform: Switch to new optimized code transform when compiling via Yul with enabled optimizer.\r\n * Yul Optimizer: Take control-flow side-effects of user-defined functions into account in various optimizer steps.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix constructor source mappings for immutables.\r\n * Commandline Interface: Disallow ``--error-recovery`` option outside of the compiler mode.\r\n * Commandline Interface: Don't return zero exit code when writing linked files to disk fails.\r\n * Commandline Interface: Fix extra newline character being appended to sources passed through standard input, affecting their hashes.\r\n * Commandline Interface: Report output selection options unsupported by the selected input mode instead of ignoring them.\r\n * Commandline Interface: When linking only accept exact matches for library names passed to the ``--libraries`` option. Library names not prefixed with a file name used to match any library with that name.\r\n * SMTChecker: Fix internal error in magic type access (``block``, ``msg``, ``tx``).\r\n * SMTChecker: Fix internal error in the CHC engine when passing gas in the function options.\r\n * TypeChecker: Fix internal error when using arrays and structs with user defined value types before declaration.\r\n * TypeChecker: Fix internal error when using user defined value types in public library functions.\r\n * TypeChecker: Improved error message for constant variables with (nested) mapping types.\r\n * Yul Assembler: Fix internal error when function names are not unique.\r\n * Yul IR Generator: Do not output empty switches/if-bodies for empty contracts.\r\n\r\n\r\n**Important Bugfixes in Experimental Features:**\r\n * Yul IR Generator: Changes to function return variables referenced in modifier invocation arguments were not properly forwarded if there was more than one return variable.\r\n\r\n\r\n**Build System:**\r\n * Pass linker-only emscripten options only when linking.\r\n * Remove obsolete compatibility workaround for emscripten builds.\r\n * Update emscripten to version 2.0.33.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\n4molybdenum2, Adam Bliss, Alex Beregszaszi, Christian Parpart, Daniel Kirchner, David Dzhalaev, Derek Brans, Gyeonghun Park, Harikrishnan Mulackal, José López, Kamil Śliwak, Leo Arias, Leonardo Alt, Mariela Mantle, Mathias Baumann, Midhun07, Mikko Ohtamaa, MrBrain295, Saurabh Sharma, sgmoore, shikharvashistha, Shivam Rajput, soroosh-sdi, Sreekesh V, tcoyvwac, TerranCivilian, vowchick, William Entriken, Zachinquarantine\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.10.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.10/soljson.js",
                    "release": {
                      "publishedAt": "2021-11-09T09:42:05Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.10",
                      "id": "RE_kwDOAm_5kc4DKIQH",
                      "name": "Version 0.8.10",
                      "description": "Solidity v0.8.10 can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enabled the new EVM code generator for pure Yul mode.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/).\r\n\r\n\r\n**Language Features:**\r\n * Inline Assembly: Support ``.address`` and ``.selector`` on external function pointers to access their address and function selector.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist.\r\n * Commandline Interface: Accept nested brackets in step sequences passed to ``--yul-optimizations``.\r\n * Commandline Interface: Add ``--debug-info`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Commandline Interface: Support ``--asm``, ``--bin``, ``--ir-optimized``, ``--ewasm`` and ``--ewasm-ir`` output selection options in assembler mode.\r\n * Commandline Interface: Use different colors when printing errors, warnings and infos.\r\n * JSON AST: Set absolute paths of imports earlier, in the ``parsing`` stage.\r\n * SMTChecker: Output values for ``block.*``, ``msg.*`` and ``tx.*`` variables that are present in the called functions.\r\n * SMTChecker: Report contract invariants and reentrancy properties. This can be enabled via the CLI option ``--model-checker-invariants`` or the Standard JSON option ``settings.modelChecker.invariants``.\r\n * Standard JSON: Accept nested brackets in step sequences passed to ``settings.optimizer.details.yulDetails.optimizerSteps``.\r\n * Standard JSON: Add ``settings.debug.debugInfo`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Yul EVM Code Transform: Switch to new optimized code transform when compiling via Yul with enabled optimizer.\r\n * Yul Optimizer: Take control-flow side-effects of user-defined functions into account in various optimizer steps.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix constructor source mappings for immutables.\r\n * Commandline Interface: Disallow ``--error-recovery`` option outside of the compiler mode.\r\n * Commandline Interface: Don't return zero exit code when writing linked files to disk fails.\r\n * Commandline Interface: Fix extra newline character being appended to sources passed through standard input, affecting their hashes.\r\n * Commandline Interface: Report output selection options unsupported by the selected input mode instead of ignoring them.\r\n * Commandline Interface: When linking only accept exact matches for library names passed to the ``--libraries`` option. Library names not prefixed with a file name used to match any library with that name.\r\n * SMTChecker: Fix internal error in magic type access (``block``, ``msg``, ``tx``).\r\n * SMTChecker: Fix internal error in the CHC engine when passing gas in the function options.\r\n * TypeChecker: Fix internal error when using arrays and structs with user defined value types before declaration.\r\n * TypeChecker: Fix internal error when using user defined value types in public library functions.\r\n * TypeChecker: Improved error message for constant variables with (nested) mapping types.\r\n * Yul Assembler: Fix internal error when function names are not unique.\r\n * Yul IR Generator: Do not output empty switches/if-bodies for empty contracts.\r\n\r\n\r\n**Important Bugfixes in Experimental Features:**\r\n * Yul IR Generator: Changes to function return variables referenced in modifier invocation arguments were not properly forwarded if there was more than one return variable.\r\n\r\n\r\n**Build System:**\r\n * Pass linker-only emscripten options only when linking.\r\n * Remove obsolete compatibility workaround for emscripten builds.\r\n * Update emscripten to version 2.0.33.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\n4molybdenum2, Adam Bliss, Alex Beregszaszi, Christian Parpart, Daniel Kirchner, David Dzhalaev, Derek Brans, Gyeonghun Park, Harikrishnan Mulackal, José López, Kamil Śliwak, Leo Arias, Leonardo Alt, Mariela Mantle, Mathias Baumann, Midhun07, Mikko Ohtamaa, MrBrain295, Saurabh Sharma, sgmoore, shikharvashistha, Shivam Rajput, soroosh-sdi, Sreekesh V, tcoyvwac, TerranCivilian, vowchick, William Entriken, Zachinquarantine\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.10.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.10/solidity_0.8.10.tar.gz",
                    "release": {
                      "publishedAt": "2021-11-09T09:42:05Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.10",
                      "id": "RE_kwDOAm_5kc4DKIQH",
                      "name": "Version 0.8.10",
                      "description": "Solidity v0.8.10 can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enabled the new EVM code generator for pure Yul mode.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/).\r\n\r\n\r\n**Language Features:**\r\n * Inline Assembly: Support ``.address`` and ``.selector`` on external function pointers to access their address and function selector.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist.\r\n * Commandline Interface: Accept nested brackets in step sequences passed to ``--yul-optimizations``.\r\n * Commandline Interface: Add ``--debug-info`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Commandline Interface: Support ``--asm``, ``--bin``, ``--ir-optimized``, ``--ewasm`` and ``--ewasm-ir`` output selection options in assembler mode.\r\n * Commandline Interface: Use different colors when printing errors, warnings and infos.\r\n * JSON AST: Set absolute paths of imports earlier, in the ``parsing`` stage.\r\n * SMTChecker: Output values for ``block.*``, ``msg.*`` and ``tx.*`` variables that are present in the called functions.\r\n * SMTChecker: Report contract invariants and reentrancy properties. This can be enabled via the CLI option ``--model-checker-invariants`` or the Standard JSON option ``settings.modelChecker.invariants``.\r\n * Standard JSON: Accept nested brackets in step sequences passed to ``settings.optimizer.details.yulDetails.optimizerSteps``.\r\n * Standard JSON: Add ``settings.debug.debugInfo`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Yul EVM Code Transform: Switch to new optimized code transform when compiling via Yul with enabled optimizer.\r\n * Yul Optimizer: Take control-flow side-effects of user-defined functions into account in various optimizer steps.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix constructor source mappings for immutables.\r\n * Commandline Interface: Disallow ``--error-recovery`` option outside of the compiler mode.\r\n * Commandline Interface: Don't return zero exit code when writing linked files to disk fails.\r\n * Commandline Interface: Fix extra newline character being appended to sources passed through standard input, affecting their hashes.\r\n * Commandline Interface: Report output selection options unsupported by the selected input mode instead of ignoring them.\r\n * Commandline Interface: When linking only accept exact matches for library names passed to the ``--libraries`` option. Library names not prefixed with a file name used to match any library with that name.\r\n * SMTChecker: Fix internal error in magic type access (``block``, ``msg``, ``tx``).\r\n * SMTChecker: Fix internal error in the CHC engine when passing gas in the function options.\r\n * TypeChecker: Fix internal error when using arrays and structs with user defined value types before declaration.\r\n * TypeChecker: Fix internal error when using user defined value types in public library functions.\r\n * TypeChecker: Improved error message for constant variables with (nested) mapping types.\r\n * Yul Assembler: Fix internal error when function names are not unique.\r\n * Yul IR Generator: Do not output empty switches/if-bodies for empty contracts.\r\n\r\n\r\n**Important Bugfixes in Experimental Features:**\r\n * Yul IR Generator: Changes to function return variables referenced in modifier invocation arguments were not properly forwarded if there was more than one return variable.\r\n\r\n\r\n**Build System:**\r\n * Pass linker-only emscripten options only when linking.\r\n * Remove obsolete compatibility workaround for emscripten builds.\r\n * Update emscripten to version 2.0.33.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\n4molybdenum2, Adam Bliss, Alex Beregszaszi, Christian Parpart, Daniel Kirchner, David Dzhalaev, Derek Brans, Gyeonghun Park, Harikrishnan Mulackal, José López, Kamil Śliwak, Leo Arias, Leonardo Alt, Mariela Mantle, Mathias Baumann, Midhun07, Mikko Ohtamaa, MrBrain295, Saurabh Sharma, sgmoore, shikharvashistha, Shivam Rajput, soroosh-sdi, Sreekesh V, tcoyvwac, TerranCivilian, vowchick, William Entriken, Zachinquarantine\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.10.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.10",
            "name": "Version 0.8.10"
          },
          {
            "id": "RE_kwDOAm_5kc4DUVq-",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.11/solc-macos",
                    "release": {
                      "publishedAt": "2021-12-20T14:45:36Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.11",
                      "id": "RE_kwDOAm_5kc4DUVq-",
                      "name": "Version 0.8.11",
                      "description": "Solidity v0.8.11 adds a first implementation of a Language Server, allows a safer way to perform ABI-encoding and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: New builtin function ``abi.encodeCall(functionPointer, (arg1, arg2, ...))`` that type-checks the arguments and returns the ABI-encoded function call data.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--lsp`` option to get ``solc`` to act as a Language Server (LSP) communicating over stdio.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix a crash when using ``@use-src`` and compiling from Yul to ewasm.\r\n * SMTChecker: Fix internal error when an unsafe target is solved more than once and the counterexample messages are different.\r\n * SMTChecker: Fix soundness of assigned storage/memory local pointers that were not erasing enough knowledge.\r\n * Fix internal error when a function has a calldata struct argument with an internal type inside.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of functions.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nKamil Śliwak, Leo Alt, nishant-sachdeva, Daniel Kirchner, Marenz, minami, Alessandro Coglio, Alex Beregszaszi, Bhargava Shastry, Dallon Asnes, Dallon Asnes, neel iyer, Christian Parpart, GitHubPang, Mathias Baumann, Omkar Nikhal, Saska Karsi, Tynan Richards, dinah.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.11.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.11/solc-static-linux",
                    "release": {
                      "publishedAt": "2021-12-20T14:45:36Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.11",
                      "id": "RE_kwDOAm_5kc4DUVq-",
                      "name": "Version 0.8.11",
                      "description": "Solidity v0.8.11 adds a first implementation of a Language Server, allows a safer way to perform ABI-encoding and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: New builtin function ``abi.encodeCall(functionPointer, (arg1, arg2, ...))`` that type-checks the arguments and returns the ABI-encoded function call data.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--lsp`` option to get ``solc`` to act as a Language Server (LSP) communicating over stdio.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix a crash when using ``@use-src`` and compiling from Yul to ewasm.\r\n * SMTChecker: Fix internal error when an unsafe target is solved more than once and the counterexample messages are different.\r\n * SMTChecker: Fix soundness of assigned storage/memory local pointers that were not erasing enough knowledge.\r\n * Fix internal error when a function has a calldata struct argument with an internal type inside.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of functions.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nKamil Śliwak, Leo Alt, nishant-sachdeva, Daniel Kirchner, Marenz, minami, Alessandro Coglio, Alex Beregszaszi, Bhargava Shastry, Dallon Asnes, Dallon Asnes, neel iyer, Christian Parpart, GitHubPang, Mathias Baumann, Omkar Nikhal, Saska Karsi, Tynan Richards, dinah.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.11.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.11/solc-windows.exe",
                    "release": {
                      "publishedAt": "2021-12-20T14:45:36Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.11",
                      "id": "RE_kwDOAm_5kc4DUVq-",
                      "name": "Version 0.8.11",
                      "description": "Solidity v0.8.11 adds a first implementation of a Language Server, allows a safer way to perform ABI-encoding and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: New builtin function ``abi.encodeCall(functionPointer, (arg1, arg2, ...))`` that type-checks the arguments and returns the ABI-encoded function call data.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--lsp`` option to get ``solc`` to act as a Language Server (LSP) communicating over stdio.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix a crash when using ``@use-src`` and compiling from Yul to ewasm.\r\n * SMTChecker: Fix internal error when an unsafe target is solved more than once and the counterexample messages are different.\r\n * SMTChecker: Fix soundness of assigned storage/memory local pointers that were not erasing enough knowledge.\r\n * Fix internal error when a function has a calldata struct argument with an internal type inside.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of functions.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nKamil Śliwak, Leo Alt, nishant-sachdeva, Daniel Kirchner, Marenz, minami, Alessandro Coglio, Alex Beregszaszi, Bhargava Shastry, Dallon Asnes, Dallon Asnes, neel iyer, Christian Parpart, GitHubPang, Mathias Baumann, Omkar Nikhal, Saska Karsi, Tynan Richards, dinah.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.11.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.11/solidity_0.8.11.tar.gz",
                    "release": {
                      "publishedAt": "2021-12-20T14:45:36Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.11",
                      "id": "RE_kwDOAm_5kc4DUVq-",
                      "name": "Version 0.8.11",
                      "description": "Solidity v0.8.11 adds a first implementation of a Language Server, allows a safer way to perform ABI-encoding and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: New builtin function ``abi.encodeCall(functionPointer, (arg1, arg2, ...))`` that type-checks the arguments and returns the ABI-encoded function call data.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--lsp`` option to get ``solc`` to act as a Language Server (LSP) communicating over stdio.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix a crash when using ``@use-src`` and compiling from Yul to ewasm.\r\n * SMTChecker: Fix internal error when an unsafe target is solved more than once and the counterexample messages are different.\r\n * SMTChecker: Fix soundness of assigned storage/memory local pointers that were not erasing enough knowledge.\r\n * Fix internal error when a function has a calldata struct argument with an internal type inside.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of functions.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nKamil Śliwak, Leo Alt, nishant-sachdeva, Daniel Kirchner, Marenz, minami, Alessandro Coglio, Alex Beregszaszi, Bhargava Shastry, Dallon Asnes, Dallon Asnes, neel iyer, Christian Parpart, GitHubPang, Mathias Baumann, Omkar Nikhal, Saska Karsi, Tynan Richards, dinah.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.11.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.11/soljson.js",
                    "release": {
                      "publishedAt": "2021-12-20T14:45:36Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.11",
                      "id": "RE_kwDOAm_5kc4DUVq-",
                      "name": "Version 0.8.11",
                      "description": "Solidity v0.8.11 adds a first implementation of a Language Server, allows a safer way to perform ABI-encoding and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: New builtin function ``abi.encodeCall(functionPointer, (arg1, arg2, ...))`` that type-checks the arguments and returns the ABI-encoded function call data.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--lsp`` option to get ``solc`` to act as a Language Server (LSP) communicating over stdio.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix a crash when using ``@use-src`` and compiling from Yul to ewasm.\r\n * SMTChecker: Fix internal error when an unsafe target is solved more than once and the counterexample messages are different.\r\n * SMTChecker: Fix soundness of assigned storage/memory local pointers that were not erasing enough knowledge.\r\n * Fix internal error when a function has a calldata struct argument with an internal type inside.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of functions.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nKamil Śliwak, Leo Alt, nishant-sachdeva, Daniel Kirchner, Marenz, minami, Alessandro Coglio, Alex Beregszaszi, Bhargava Shastry, Dallon Asnes, Dallon Asnes, neel iyer, Christian Parpart, GitHubPang, Mathias Baumann, Omkar Nikhal, Saska Karsi, Tynan Richards, dinah.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.11.tar.gz and not the zip provided by github directly.\r\n\r\n"
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.11",
            "name": "Version 0.8.11"
          },
          {
            "id": "RE_kwDOAm_5kc4DjrVd",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.12/solc-macos",
                    "release": {
                      "publishedAt": "2022-02-16T11:50:24Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.12",
                      "id": "RE_kwDOAm_5kc4DjrVd",
                      "name": "Version 0.8.12",
                      "description": "Solidity v0.8.12 improves the javascript/wasm binary and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/02/16/solidity-0.8.12-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: Add equality-comparison operators for external function types.\r\n * General: Support ``ContractName.functionName`` for ``abi.encodeCall``, in addition to external function pointers.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Event and error signatures are also returned when using ``--hashes``.\r\n * Yul Optimizer: Remove ``mstore`` and ``sstore`` operations if the slot already contains the same value.\r\n * Yul: Emit immutable references for pure yul code when requested.\r\n\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Allow builtin names in ``yulPath`` to support ``.address`` in function pointers.\r\n * Code Generator: Fix internal error when accessing the members of external functions occupying more than two stack slots.\r\n * Code Generator: Fix internal error when doing an explicit conversion from ``string calldata`` to ``bytes``.\r\n * Control Flow Graph: Perform proper virtual lookup for modifiers for uninitialized variable and unreachable code analysis.\r\n * General: ``string.concat`` now properly takes strings as arguments and returns ``string memory``. It was accidentally introduced as a copy of ``bytes.concat`` before.\r\n * Immutables: Fix wrong error when the constructor of a base contract uses ``return`` and the derived contract contains immutable variables.\r\n * Inheritance: Consider functions in all ancestors during override analysis.\r\n * IR Generator: Add missing cleanup during the conversion of fixed bytes types to smaller fixed bytes types.\r\n * IR Generator: Add missing cleanup for indexed event arguments of value type.\r\n * IR Generator: Fix internal error when copying reference types in calldata and storage to struct or array members in memory.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of structs containing functions.\r\n * Natspec: Fix internal error when overriding a struct getter with a Natspec-documented return value and the name in the struct is different.\r\n * Type Checker: Fix internal error when a constant variable declaration forward references a struct.\r\n * Yul EVM Code Transform: Improved stack shuffling in corner cases.\r\n\r\n\r\n**Solc-Js:**\r\n * The wrapper now requires at least nodejs v10.\r\n * The code has been ported to TypeScript.\r\n\r\n\r\n**Build System:**\r\n * Emscripten builds store the embedded WebAssembly binary in LZ4 compressed format and transparently decompress on loading.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Aleksey Bykhun, Amsavarthan Lv, Ayush Shukla, Bhargava Shastry, Braden Watling, Brien, Bruno Barbieri, Christian Parpart, Daniel Kirchner, Esquith Allen, Franziska Heintel, Hakeem Almidan, Harikrishnan Mulackal, joshieDo, joshuatarkwski, Kamil Śliwak, Laurent, Leo Alt, Markus Waas, Mathias L. Baumann, mejsiej, Mohamed Safouen Bouabid, Naveen Sahu, Nikita Stupin, Nishant Sachdeva, Pranay Reddy, Sean Billig, Semar Augusto, William Entriken, yatharthagoenka, Younghoon-Lee.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.12.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.12/solc-static-linux",
                    "release": {
                      "publishedAt": "2022-02-16T11:50:24Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.12",
                      "id": "RE_kwDOAm_5kc4DjrVd",
                      "name": "Version 0.8.12",
                      "description": "Solidity v0.8.12 improves the javascript/wasm binary and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/02/16/solidity-0.8.12-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: Add equality-comparison operators for external function types.\r\n * General: Support ``ContractName.functionName`` for ``abi.encodeCall``, in addition to external function pointers.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Event and error signatures are also returned when using ``--hashes``.\r\n * Yul Optimizer: Remove ``mstore`` and ``sstore`` operations if the slot already contains the same value.\r\n * Yul: Emit immutable references for pure yul code when requested.\r\n\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Allow builtin names in ``yulPath`` to support ``.address`` in function pointers.\r\n * Code Generator: Fix internal error when accessing the members of external functions occupying more than two stack slots.\r\n * Code Generator: Fix internal error when doing an explicit conversion from ``string calldata`` to ``bytes``.\r\n * Control Flow Graph: Perform proper virtual lookup for modifiers for uninitialized variable and unreachable code analysis.\r\n * General: ``string.concat`` now properly takes strings as arguments and returns ``string memory``. It was accidentally introduced as a copy of ``bytes.concat`` before.\r\n * Immutables: Fix wrong error when the constructor of a base contract uses ``return`` and the derived contract contains immutable variables.\r\n * Inheritance: Consider functions in all ancestors during override analysis.\r\n * IR Generator: Add missing cleanup during the conversion of fixed bytes types to smaller fixed bytes types.\r\n * IR Generator: Add missing cleanup for indexed event arguments of value type.\r\n * IR Generator: Fix internal error when copying reference types in calldata and storage to struct or array members in memory.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of structs containing functions.\r\n * Natspec: Fix internal error when overriding a struct getter with a Natspec-documented return value and the name in the struct is different.\r\n * Type Checker: Fix internal error when a constant variable declaration forward references a struct.\r\n * Yul EVM Code Transform: Improved stack shuffling in corner cases.\r\n\r\n\r\n**Solc-Js:**\r\n * The wrapper now requires at least nodejs v10.\r\n * The code has been ported to TypeScript.\r\n\r\n\r\n**Build System:**\r\n * Emscripten builds store the embedded WebAssembly binary in LZ4 compressed format and transparently decompress on loading.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Aleksey Bykhun, Amsavarthan Lv, Ayush Shukla, Bhargava Shastry, Braden Watling, Brien, Bruno Barbieri, Christian Parpart, Daniel Kirchner, Esquith Allen, Franziska Heintel, Hakeem Almidan, Harikrishnan Mulackal, joshieDo, joshuatarkwski, Kamil Śliwak, Laurent, Leo Alt, Markus Waas, Mathias L. Baumann, mejsiej, Mohamed Safouen Bouabid, Naveen Sahu, Nikita Stupin, Nishant Sachdeva, Pranay Reddy, Sean Billig, Semar Augusto, William Entriken, yatharthagoenka, Younghoon-Lee.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.12.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.12/solc-windows.exe",
                    "release": {
                      "publishedAt": "2022-02-16T11:50:24Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.12",
                      "id": "RE_kwDOAm_5kc4DjrVd",
                      "name": "Version 0.8.12",
                      "description": "Solidity v0.8.12 improves the javascript/wasm binary and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/02/16/solidity-0.8.12-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: Add equality-comparison operators for external function types.\r\n * General: Support ``ContractName.functionName`` for ``abi.encodeCall``, in addition to external function pointers.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Event and error signatures are also returned when using ``--hashes``.\r\n * Yul Optimizer: Remove ``mstore`` and ``sstore`` operations if the slot already contains the same value.\r\n * Yul: Emit immutable references for pure yul code when requested.\r\n\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Allow builtin names in ``yulPath`` to support ``.address`` in function pointers.\r\n * Code Generator: Fix internal error when accessing the members of external functions occupying more than two stack slots.\r\n * Code Generator: Fix internal error when doing an explicit conversion from ``string calldata`` to ``bytes``.\r\n * Control Flow Graph: Perform proper virtual lookup for modifiers for uninitialized variable and unreachable code analysis.\r\n * General: ``string.concat`` now properly takes strings as arguments and returns ``string memory``. It was accidentally introduced as a copy of ``bytes.concat`` before.\r\n * Immutables: Fix wrong error when the constructor of a base contract uses ``return`` and the derived contract contains immutable variables.\r\n * Inheritance: Consider functions in all ancestors during override analysis.\r\n * IR Generator: Add missing cleanup during the conversion of fixed bytes types to smaller fixed bytes types.\r\n * IR Generator: Add missing cleanup for indexed event arguments of value type.\r\n * IR Generator: Fix internal error when copying reference types in calldata and storage to struct or array members in memory.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of structs containing functions.\r\n * Natspec: Fix internal error when overriding a struct getter with a Natspec-documented return value and the name in the struct is different.\r\n * Type Checker: Fix internal error when a constant variable declaration forward references a struct.\r\n * Yul EVM Code Transform: Improved stack shuffling in corner cases.\r\n\r\n\r\n**Solc-Js:**\r\n * The wrapper now requires at least nodejs v10.\r\n * The code has been ported to TypeScript.\r\n\r\n\r\n**Build System:**\r\n * Emscripten builds store the embedded WebAssembly binary in LZ4 compressed format and transparently decompress on loading.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Aleksey Bykhun, Amsavarthan Lv, Ayush Shukla, Bhargava Shastry, Braden Watling, Brien, Bruno Barbieri, Christian Parpart, Daniel Kirchner, Esquith Allen, Franziska Heintel, Hakeem Almidan, Harikrishnan Mulackal, joshieDo, joshuatarkwski, Kamil Śliwak, Laurent, Leo Alt, Markus Waas, Mathias L. Baumann, mejsiej, Mohamed Safouen Bouabid, Naveen Sahu, Nikita Stupin, Nishant Sachdeva, Pranay Reddy, Sean Billig, Semar Augusto, William Entriken, yatharthagoenka, Younghoon-Lee.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.12.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.12/soljson.js",
                    "release": {
                      "publishedAt": "2022-02-16T11:50:24Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.12",
                      "id": "RE_kwDOAm_5kc4DjrVd",
                      "name": "Version 0.8.12",
                      "description": "Solidity v0.8.12 improves the javascript/wasm binary and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/02/16/solidity-0.8.12-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: Add equality-comparison operators for external function types.\r\n * General: Support ``ContractName.functionName`` for ``abi.encodeCall``, in addition to external function pointers.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Event and error signatures are also returned when using ``--hashes``.\r\n * Yul Optimizer: Remove ``mstore`` and ``sstore`` operations if the slot already contains the same value.\r\n * Yul: Emit immutable references for pure yul code when requested.\r\n\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Allow builtin names in ``yulPath`` to support ``.address`` in function pointers.\r\n * Code Generator: Fix internal error when accessing the members of external functions occupying more than two stack slots.\r\n * Code Generator: Fix internal error when doing an explicit conversion from ``string calldata`` to ``bytes``.\r\n * Control Flow Graph: Perform proper virtual lookup for modifiers for uninitialized variable and unreachable code analysis.\r\n * General: ``string.concat`` now properly takes strings as arguments and returns ``string memory``. It was accidentally introduced as a copy of ``bytes.concat`` before.\r\n * Immutables: Fix wrong error when the constructor of a base contract uses ``return`` and the derived contract contains immutable variables.\r\n * Inheritance: Consider functions in all ancestors during override analysis.\r\n * IR Generator: Add missing cleanup during the conversion of fixed bytes types to smaller fixed bytes types.\r\n * IR Generator: Add missing cleanup for indexed event arguments of value type.\r\n * IR Generator: Fix internal error when copying reference types in calldata and storage to struct or array members in memory.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of structs containing functions.\r\n * Natspec: Fix internal error when overriding a struct getter with a Natspec-documented return value and the name in the struct is different.\r\n * Type Checker: Fix internal error when a constant variable declaration forward references a struct.\r\n * Yul EVM Code Transform: Improved stack shuffling in corner cases.\r\n\r\n\r\n**Solc-Js:**\r\n * The wrapper now requires at least nodejs v10.\r\n * The code has been ported to TypeScript.\r\n\r\n\r\n**Build System:**\r\n * Emscripten builds store the embedded WebAssembly binary in LZ4 compressed format and transparently decompress on loading.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Aleksey Bykhun, Amsavarthan Lv, Ayush Shukla, Bhargava Shastry, Braden Watling, Brien, Bruno Barbieri, Christian Parpart, Daniel Kirchner, Esquith Allen, Franziska Heintel, Hakeem Almidan, Harikrishnan Mulackal, joshieDo, joshuatarkwski, Kamil Śliwak, Laurent, Leo Alt, Markus Waas, Mathias L. Baumann, mejsiej, Mohamed Safouen Bouabid, Naveen Sahu, Nikita Stupin, Nishant Sachdeva, Pranay Reddy, Sean Billig, Semar Augusto, William Entriken, yatharthagoenka, Younghoon-Lee.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.12.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.12/solidity_0.8.12.tar.gz",
                    "release": {
                      "publishedAt": "2022-02-16T11:50:24Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.12",
                      "id": "RE_kwDOAm_5kc4DjrVd",
                      "name": "Version 0.8.12",
                      "description": "Solidity v0.8.12 improves the javascript/wasm binary and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/02/16/solidity-0.8.12-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: Add equality-comparison operators for external function types.\r\n * General: Support ``ContractName.functionName`` for ``abi.encodeCall``, in addition to external function pointers.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Event and error signatures are also returned when using ``--hashes``.\r\n * Yul Optimizer: Remove ``mstore`` and ``sstore`` operations if the slot already contains the same value.\r\n * Yul: Emit immutable references for pure yul code when requested.\r\n\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Allow builtin names in ``yulPath`` to support ``.address`` in function pointers.\r\n * Code Generator: Fix internal error when accessing the members of external functions occupying more than two stack slots.\r\n * Code Generator: Fix internal error when doing an explicit conversion from ``string calldata`` to ``bytes``.\r\n * Control Flow Graph: Perform proper virtual lookup for modifiers for uninitialized variable and unreachable code analysis.\r\n * General: ``string.concat`` now properly takes strings as arguments and returns ``string memory``. It was accidentally introduced as a copy of ``bytes.concat`` before.\r\n * Immutables: Fix wrong error when the constructor of a base contract uses ``return`` and the derived contract contains immutable variables.\r\n * Inheritance: Consider functions in all ancestors during override analysis.\r\n * IR Generator: Add missing cleanup during the conversion of fixed bytes types to smaller fixed bytes types.\r\n * IR Generator: Add missing cleanup for indexed event arguments of value type.\r\n * IR Generator: Fix internal error when copying reference types in calldata and storage to struct or array members in memory.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of structs containing functions.\r\n * Natspec: Fix internal error when overriding a struct getter with a Natspec-documented return value and the name in the struct is different.\r\n * Type Checker: Fix internal error when a constant variable declaration forward references a struct.\r\n * Yul EVM Code Transform: Improved stack shuffling in corner cases.\r\n\r\n\r\n**Solc-Js:**\r\n * The wrapper now requires at least nodejs v10.\r\n * The code has been ported to TypeScript.\r\n\r\n\r\n**Build System:**\r\n * Emscripten builds store the embedded WebAssembly binary in LZ4 compressed format and transparently decompress on loading.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Aleksey Bykhun, Amsavarthan Lv, Ayush Shukla, Bhargava Shastry, Braden Watling, Brien, Bruno Barbieri, Christian Parpart, Daniel Kirchner, Esquith Allen, Franziska Heintel, Hakeem Almidan, Harikrishnan Mulackal, joshieDo, joshuatarkwski, Kamil Śliwak, Laurent, Leo Alt, Markus Waas, Mathias L. Baumann, mejsiej, Mohamed Safouen Bouabid, Naveen Sahu, Nikita Stupin, Nishant Sachdeva, Pranay Reddy, Sean Billig, Semar Augusto, William Entriken, yatharthagoenka, Younghoon-Lee.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.12.tar.gz and not the zip provided by github directly."
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.12",
            "name": "Version 0.8.12"
          },
          {
            "id": "RE_kwDOAm_5kc4DsfsW",
            "releaseAssets": {
              "edges": [
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.13/solidity_0.8.13.tar.gz",
                    "release": {
                      "publishedAt": "2022-03-16T13:32:43Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.13",
                      "id": "RE_kwDOAm_5kc4DsfsW",
                      "name": "Version 0.8.13",
                      "description": "Solidity v0.8.13 fixes an important bug related to ``abi.encodeCall``, extends the ``using for`` directive and implements \"go to definition\" for the language server.\r\n\r\nFurthermore, compiling via the new Yul IR pipeline is now considered production ready.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/03/16/solidity-0.8.13-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generator: Correctly encode literals used in ``abi.encodeCall`` in place of fixed bytes arguments.\r\n\r\n\r\n**Language Features:**\r\n * General: Allow annotating inline assembly as memory-safe to allow optimizations and stack limit evasion that rely on respecting Solidity's memory model.\r\n * General: ``using M for Type;`` is allowed at file level and ``M`` can now also be a brace-enclosed list of free functions or library functions.\r\n * General: ``using ... for T global;`` is allowed at file level where the user-defined type ``T`` has been defined, resulting in the effect of the statement being available everywhere ``T`` is available.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Allow the use of ``--via-ir`` in place of ``--experimental-via-ir``.\r\n * Compilation via Yul IR is no longer marked as experimental.\r\n * JSON-AST: Added selector field for errors and events.\r\n * LSP: Implements goto-definition.\r\n * Peephole Optimizer: Optimize comparisons in front of conditional jumps and conditional jumps across a single unconditional jump.\r\n * Yul EVM Code Transform: Avoid unnecessary ``pop``s on terminating control flow.\r\n * Yul Optimizer: Remove ``sstore`` and ``mstore`` operations that are never read from.\r\n\r\n\r\n**Bugfixes:**\r\n * General: Fix internal error for locales with unusual capitalization rules. Locale set in the environment is now completely ignored.\r\n * Type Checker: Fix incorrect type checker errors when importing overloaded functions.\r\n * Yul IR Code Generation: Optimize embedded creation code with correct settings. This fixes potential mismatches between the constructor code of a contract compiled in isolation and the bytecode in ``type(C).creationCode``, resp. the bytecode used for ``new C(...)``.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Abdul Karim Moro, Alexander Arlt, Bhargava Shastry, Callis Ezenwaka, Christian Parpart, Daniel Kirchner, david-k, franzihei, hrkrshnn, Kamil Śliwak, kanedaaaa, Leo Alt, Marenz, Mate Soos, Nishant Sachdeva, Paarth Madan, Richie, Sleepy, Tyler, wechman, Wes Bouaziz, \r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.13.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.13/solc-macos",
                    "release": {
                      "publishedAt": "2022-03-16T13:32:43Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.13",
                      "id": "RE_kwDOAm_5kc4DsfsW",
                      "name": "Version 0.8.13",
                      "description": "Solidity v0.8.13 fixes an important bug related to ``abi.encodeCall``, extends the ``using for`` directive and implements \"go to definition\" for the language server.\r\n\r\nFurthermore, compiling via the new Yul IR pipeline is now considered production ready.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/03/16/solidity-0.8.13-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generator: Correctly encode literals used in ``abi.encodeCall`` in place of fixed bytes arguments.\r\n\r\n\r\n**Language Features:**\r\n * General: Allow annotating inline assembly as memory-safe to allow optimizations and stack limit evasion that rely on respecting Solidity's memory model.\r\n * General: ``using M for Type;`` is allowed at file level and ``M`` can now also be a brace-enclosed list of free functions or library functions.\r\n * General: ``using ... for T global;`` is allowed at file level where the user-defined type ``T`` has been defined, resulting in the effect of the statement being available everywhere ``T`` is available.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Allow the use of ``--via-ir`` in place of ``--experimental-via-ir``.\r\n * Compilation via Yul IR is no longer marked as experimental.\r\n * JSON-AST: Added selector field for errors and events.\r\n * LSP: Implements goto-definition.\r\n * Peephole Optimizer: Optimize comparisons in front of conditional jumps and conditional jumps across a single unconditional jump.\r\n * Yul EVM Code Transform: Avoid unnecessary ``pop``s on terminating control flow.\r\n * Yul Optimizer: Remove ``sstore`` and ``mstore`` operations that are never read from.\r\n\r\n\r\n**Bugfixes:**\r\n * General: Fix internal error for locales with unusual capitalization rules. Locale set in the environment is now completely ignored.\r\n * Type Checker: Fix incorrect type checker errors when importing overloaded functions.\r\n * Yul IR Code Generation: Optimize embedded creation code with correct settings. This fixes potential mismatches between the constructor code of a contract compiled in isolation and the bytecode in ``type(C).creationCode``, resp. the bytecode used for ``new C(...)``.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Abdul Karim Moro, Alexander Arlt, Bhargava Shastry, Callis Ezenwaka, Christian Parpart, Daniel Kirchner, david-k, franzihei, hrkrshnn, Kamil Śliwak, kanedaaaa, Leo Alt, Marenz, Mate Soos, Nishant Sachdeva, Paarth Madan, Richie, Sleepy, Tyler, wechman, Wes Bouaziz, \r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.13.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.13/solc-static-linux",
                    "release": {
                      "publishedAt": "2022-03-16T13:32:43Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.13",
                      "id": "RE_kwDOAm_5kc4DsfsW",
                      "name": "Version 0.8.13",
                      "description": "Solidity v0.8.13 fixes an important bug related to ``abi.encodeCall``, extends the ``using for`` directive and implements \"go to definition\" for the language server.\r\n\r\nFurthermore, compiling via the new Yul IR pipeline is now considered production ready.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/03/16/solidity-0.8.13-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generator: Correctly encode literals used in ``abi.encodeCall`` in place of fixed bytes arguments.\r\n\r\n\r\n**Language Features:**\r\n * General: Allow annotating inline assembly as memory-safe to allow optimizations and stack limit evasion that rely on respecting Solidity's memory model.\r\n * General: ``using M for Type;`` is allowed at file level and ``M`` can now also be a brace-enclosed list of free functions or library functions.\r\n * General: ``using ... for T global;`` is allowed at file level where the user-defined type ``T`` has been defined, resulting in the effect of the statement being available everywhere ``T`` is available.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Allow the use of ``--via-ir`` in place of ``--experimental-via-ir``.\r\n * Compilation via Yul IR is no longer marked as experimental.\r\n * JSON-AST: Added selector field for errors and events.\r\n * LSP: Implements goto-definition.\r\n * Peephole Optimizer: Optimize comparisons in front of conditional jumps and conditional jumps across a single unconditional jump.\r\n * Yul EVM Code Transform: Avoid unnecessary ``pop``s on terminating control flow.\r\n * Yul Optimizer: Remove ``sstore`` and ``mstore`` operations that are never read from.\r\n\r\n\r\n**Bugfixes:**\r\n * General: Fix internal error for locales with unusual capitalization rules. Locale set in the environment is now completely ignored.\r\n * Type Checker: Fix incorrect type checker errors when importing overloaded functions.\r\n * Yul IR Code Generation: Optimize embedded creation code with correct settings. This fixes potential mismatches between the constructor code of a contract compiled in isolation and the bytecode in ``type(C).creationCode``, resp. the bytecode used for ``new C(...)``.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Abdul Karim Moro, Alexander Arlt, Bhargava Shastry, Callis Ezenwaka, Christian Parpart, Daniel Kirchner, david-k, franzihei, hrkrshnn, Kamil Śliwak, kanedaaaa, Leo Alt, Marenz, Mate Soos, Nishant Sachdeva, Paarth Madan, Richie, Sleepy, Tyler, wechman, Wes Bouaziz, \r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.13.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.13/solc-windows.exe",
                    "release": {
                      "publishedAt": "2022-03-16T13:32:43Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.13",
                      "id": "RE_kwDOAm_5kc4DsfsW",
                      "name": "Version 0.8.13",
                      "description": "Solidity v0.8.13 fixes an important bug related to ``abi.encodeCall``, extends the ``using for`` directive and implements \"go to definition\" for the language server.\r\n\r\nFurthermore, compiling via the new Yul IR pipeline is now considered production ready.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/03/16/solidity-0.8.13-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generator: Correctly encode literals used in ``abi.encodeCall`` in place of fixed bytes arguments.\r\n\r\n\r\n**Language Features:**\r\n * General: Allow annotating inline assembly as memory-safe to allow optimizations and stack limit evasion that rely on respecting Solidity's memory model.\r\n * General: ``using M for Type;`` is allowed at file level and ``M`` can now also be a brace-enclosed list of free functions or library functions.\r\n * General: ``using ... for T global;`` is allowed at file level where the user-defined type ``T`` has been defined, resulting in the effect of the statement being available everywhere ``T`` is available.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Allow the use of ``--via-ir`` in place of ``--experimental-via-ir``.\r\n * Compilation via Yul IR is no longer marked as experimental.\r\n * JSON-AST: Added selector field for errors and events.\r\n * LSP: Implements goto-definition.\r\n * Peephole Optimizer: Optimize comparisons in front of conditional jumps and conditional jumps across a single unconditional jump.\r\n * Yul EVM Code Transform: Avoid unnecessary ``pop``s on terminating control flow.\r\n * Yul Optimizer: Remove ``sstore`` and ``mstore`` operations that are never read from.\r\n\r\n\r\n**Bugfixes:**\r\n * General: Fix internal error for locales with unusual capitalization rules. Locale set in the environment is now completely ignored.\r\n * Type Checker: Fix incorrect type checker errors when importing overloaded functions.\r\n * Yul IR Code Generation: Optimize embedded creation code with correct settings. This fixes potential mismatches between the constructor code of a contract compiled in isolation and the bytecode in ``type(C).creationCode``, resp. the bytecode used for ``new C(...)``.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Abdul Karim Moro, Alexander Arlt, Bhargava Shastry, Callis Ezenwaka, Christian Parpart, Daniel Kirchner, david-k, franzihei, hrkrshnn, Kamil Śliwak, kanedaaaa, Leo Alt, Marenz, Mate Soos, Nishant Sachdeva, Paarth Madan, Richie, Sleepy, Tyler, wechman, Wes Bouaziz, \r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.13.tar.gz and not the zip provided by github directly."
                    }
                  }
                },
                {
                  "node": {
                    "downloadUrl": "https://github.com/ethereum/solidity/releases/download/v0.8.13/soljson.js",
                    "release": {
                      "publishedAt": "2022-03-16T13:32:43Z",
                      "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.13",
                      "id": "RE_kwDOAm_5kc4DsfsW",
                      "name": "Version 0.8.13",
                      "description": "Solidity v0.8.13 fixes an important bug related to ``abi.encodeCall``, extends the ``using for`` directive and implements \"go to definition\" for the language server.\r\n\r\nFurthermore, compiling via the new Yul IR pipeline is now considered production ready.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/03/16/solidity-0.8.13-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generator: Correctly encode literals used in ``abi.encodeCall`` in place of fixed bytes arguments.\r\n\r\n\r\n**Language Features:**\r\n * General: Allow annotating inline assembly as memory-safe to allow optimizations and stack limit evasion that rely on respecting Solidity's memory model.\r\n * General: ``using M for Type;`` is allowed at file level and ``M`` can now also be a brace-enclosed list of free functions or library functions.\r\n * General: ``using ... for T global;`` is allowed at file level where the user-defined type ``T`` has been defined, resulting in the effect of the statement being available everywhere ``T`` is available.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Allow the use of ``--via-ir`` in place of ``--experimental-via-ir``.\r\n * Compilation via Yul IR is no longer marked as experimental.\r\n * JSON-AST: Added selector field for errors and events.\r\n * LSP: Implements goto-definition.\r\n * Peephole Optimizer: Optimize comparisons in front of conditional jumps and conditional jumps across a single unconditional jump.\r\n * Yul EVM Code Transform: Avoid unnecessary ``pop``s on terminating control flow.\r\n * Yul Optimizer: Remove ``sstore`` and ``mstore`` operations that are never read from.\r\n\r\n\r\n**Bugfixes:**\r\n * General: Fix internal error for locales with unusual capitalization rules. Locale set in the environment is now completely ignored.\r\n * Type Checker: Fix incorrect type checker errors when importing overloaded functions.\r\n * Yul IR Code Generation: Optimize embedded creation code with correct settings. This fixes potential mismatches between the constructor code of a contract compiled in isolation and the bytecode in ``type(C).creationCode``, resp. the bytecode used for ``new C(...)``.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Abdul Karim Moro, Alexander Arlt, Bhargava Shastry, Callis Ezenwaka, Christian Parpart, Daniel Kirchner, david-k, franzihei, hrkrshnn, Kamil Śliwak, kanedaaaa, Leo Alt, Marenz, Mate Soos, Nishant Sachdeva, Paarth Madan, Richie, Sleepy, Tyler, wechman, Wes Bouaziz, \r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.13.tar.gz and not the zip provided by github directly."
                    }
                  }
                }
              ]
            },
            "url": "https://github.com/ethereum/solidity/releases/tag/v0.8.13",
            "name": "Version 0.8.13"
          }
        ]
      }
    }
  }
}